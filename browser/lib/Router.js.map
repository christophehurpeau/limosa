{"version":3,"sources":["../../src/Router.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;AAEA,IAAM,sBAAsB,MAA5B;AACA,IAAM,oBAAoB,MAA1B;;IAEqB,M;;;;;;;;AAIjB,oBAAY,kBAAZ,EAAgC;AAAA;;AAC5B,aAAK,UAAL,GAAkB,IAAI,GAAJ,EAAlB;AACA,aAAK,OAAL,GAAe,EAAf;AACA,aAAK,mBAAL,GAA2B,kBAA3B;AACH;;;;;;;;;;;;;;;8BAQG,G,EAAqB;AACrB,mBAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,GAApB,CAAP;AACH;;;;;;;;;;;;;mCAMQ,Q,EAAkB,K,EAA0B;AACjD,gBAAI,gCAAJ,EAAkC;AAC9B,qBAAK,iBAAL,CAAuB,QAAvB,EAAiC,KAAjC;AACH;;AAED,iBAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB;AACH;;;;;;;;;;;;;4CAMiB,Q,EAAkB,K,EAAoB;AACpD,gBAAI,KAAK,UAAL,CAAgB,GAAhB,CAAoB,QAApB,CAAJ,EAAmC;AAC/B,sBAAM,IAAI,KAAJ,2BAAkC,QAAlC,OAAN;AACH;AACD,iBAAK,UAAL,CAAgB,GAAhB,CAAoB,QAApB,EAA8B,KAA9B;AACH;;;;;;;;;;;;;;+BAOI,I,EAA0C;AAAA,gBAA5B,IAA4B,yDAAb,IAAa;;AAC3C,yBAAW,KAAK,IAAL,GAAY,OAAZ,CAAoB,mBAApB,EAAyC,EAAzC,EAA6C,OAA7C,CAAqD,iBAArD,EAAwE,EAAxE,CAAX;AACA,mBAAO,KAAK,UAAL,CAAgB,KAAK,OAArB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,CAAP;AACH;;;;;;;;;;;;;;;;;;;;qCAUU,M,EAAQ,Y,EAAc,I,EAAM,I,EAAM,W,EAAa;AAAA;;AACtD,gBAAI,eAAJ;AACA,mBAAO,IAAP,CAAY,UAAC,KAAD,EAAQ,KAAR,EAAkB;;AAE1B,oBAAI,YAAY,MAAM,GAAN,CAAU,IAAV,CAAhB;AACA,oBAAI,CAAC,SAAL,EAAgB;AACZ,0BAAM,IAAI,KAAJ,qCAA4C,IAA5C,mBAA8D,KAA9D,CAAN;AACH;;;AAGD,oBAAI,MAAK,MAAT,EAAiB;AACb,0BAAK,MAAL,CAAY,IAAZ,kCAAgD,UAAU,MAA1D;AACH;;AAED,oBAAM,QAAQ,UAAU,KAAV,CAAgB,IAAhB,CAAd;AACA,oBAAI,CAAC,KAAL,EAAY;AACR,2BAAO,KAAP;AACH;;;AAGD,sBAAM,KAAN,G;AACA,oBAAI,aAAa,MAAM,MAAvB;;AAEA,oBAAI,kCAAJ,EAAyC;AACrC,wBAAM,gBAAgB,MAAM,EAAE,UAAR,CAAtB;;;AAGA,wBAAI,MAAM,mBAAN,OAAgC,CAApC,EAAuC;AAAA,yB;;4BAAA;;AAEnC,gCAAI,CAAC,WAAL,EAAkB;AACd,8CAAc,IAAI,GAAJ,EAAd;AACH;;AAED,gCAAI,QAAQ,CAAZ;AACA,kCAAM,WAAN,CAAkB,OAAlB,CAA0B,UAAC,SAAD,EAAe;AACrC,oCAAM,QAAQ,MAAM,OAAN,CAAd;AACA,oCAAI,KAAJ,EAAW;AACP,gDAAY,GAAZ,CAAgB,SAAhB,EAA2B,KAA3B;AACH;AACJ,6BALD;AAPmC;AAatC;;;;;;;;;;AAUD,6BAAS,MAAK,UAAL,CAAgB,MAAM,SAAtB,EAAiC,YAAjC,EAA+C,aAA/C,EAA8D,IAA9D,EAAoE,WAApE,CAAT;;AAEH,iBA7BD,MA6BO;AACH,iCAAS,MAAK,YAAL,CAAkB,YAAlB,EAAgC,IAAhC,EAAsC,KAAtC,EAA6C,KAA7C,EAAoD,UAApD,EAAgE,WAAhE,CAAT;AACH;;AAED,uBAAO,IAAP;AACH,aAvDD;AAwDA,mBAAO,MAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;uCAaY,Y,EAAc,I,EAAM,K,EAAO,K,EAAO,U,EAAY,W,EAAa;AACpE,gBAAI,QAAQ,CAAZ;AACA,gBAAI,YAAY,eAAe,CAAf,IAAoB,CAAC,MAAM,SAA3B,GAAuC,SAAvC,GAAmD,MAAM,EAAE,UAAR,CAAnE;;AAEA,gBAAI,aAAa,MAAM,UAAvB;AACA,gBAAI,SAAS,MAAM,MAAnB;;AAEA,gBAAI,oBAAJ;;AAEA,gBAAI,MAAM,mBAAN,OAAgC,CAApC,EAAuC;;AAEnC,oBAAI,CAAC,WAAL,EAAkB;AACd,kCAAc,IAAI,GAAJ,EAAd;AACH;;AAED,sBAAM,WAAN,CAAkB,OAAlB,CAA0B,UAAC,SAAD,EAAe;AACrC,wBAAM,QAAQ,MAAM,OAAN,CAAd;AACA,wBAAI,KAAJ,EAAW;AACP,oCAAY,GAAZ,CAAgB,SAAhB,EAA2B,KAA3B;AACH;AACJ,iBALD;;AAOA,oBAAI,CAAC,YAAY,IAAjB,EAAuB;AACnB,kCAAc,SAAd;AACH;AACJ;;AAED,gBAAI,WAAJ,EAAiB;;AAEb,oBAAI,YAAY,GAAZ,CAAgB,YAAhB,CAAJ,EAAmC;AAC/B,iCAAa,KAAK,mBAAL,CAAyB,WAAzB,CAAqC,YAAY,GAAZ,CAAgB,YAAhB,CAArC,EAAoE,IAApE,CAAb;;AAEA,gCAAY,MAAZ,CAAmB,YAAnB;AACH;;AAED,oBAAI,YAAY,GAAZ,CAAgB,QAAhB,CAAJ,EAA+B;AAC3B,6BAAS,KAAK,mBAAL,CAAyB,WAAzB,CAAqC,YAAY,GAAZ,CAAgB,QAAhB,CAArC,EAAgE,IAAhE,CAAT;;AAEA,gCAAY,MAAZ,CAAmB,QAAnB;AACH;;AAED,oBAAI,CAAC,YAAY,IAAjB,EAAuB;AACnB,kCAAc,SAAd;AACH;AACJ;;;AAGD,gBAAI,QAAQ,CAAR,KAAc,UAAd,IAA4B,MAAM,KAAN,CAAhC,EAA8C;AAC1C,8BAAc,MAAM,KAAN,EAAa,KAAb,CAAmB,GAAnB,CAAd;AACH;;AAED,mBAAO,oBAAU,YAAV,EAAwB,UAAxB,EAAoC,MAApC,EAA4C,WAA5C,EAAyD,WAAzD,EAAsE,SAAtE,CAAP;AACH;;;;;;;;;;;;;;;;;;;;uCAYY,I,EAAM,Q,EAAU,M,EAAQ;AACjC,gBAAM,QAAQ,KAAK,UAAL,CAAgB,GAAhB,CAAoB,QAApB,CAAd;AACA,gBAAI;AACA,uBAAO,MAAM,MAAN,CAAa,GAAb,CAAiB,IAAjB,EAAuB,GAAvB,CAA2B,MAA3B,CAAP;AACH,aAFD,CAEE,OAAO,GAAP,EAAY;AACV,sBAAM,IAAI,KAAJ,CAAU,IAAI,OAAd,CAAN;AACH;AACJ;;;;;;kBA5MgB,M","file":"Router.js","sourcesContent":["import RouterRoute from './RouterRoute/Route';\nimport RouterRouteSegment from './RouterRoute/Segment';\nimport Route from './Route';\nimport RouterRouteCommon from './RouterRoute/Common';\n\nconst regExpStartingSlash = /^\\/+/;\nconst regExpEndingSlash = /\\/+$/;\n\nexport default class Router {\n    /**\n     * @param {RoutesTranslations} routesTranslations\n     */\n    constructor(routesTranslations) {\n        this._routesMap = new Map();\n        this._routes = [];\n        this._routesTranslations = routesTranslations;\n    }\n\n    /**\n     * Get a Route by its key\n     *\n     * @param {string} key\n     * @return {Route}\n     */\n    get(key: string): ?Route {\n        return this._routesMap.get(key);\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {RouterRouteCommon} route\n     */\n    addRoute(routeKey: string, route: RouterRouteCommon) {\n        if (route instanceof RouterRoute) {\n            this._addInternalRoute(routeKey, route);\n        }\n\n        this._routes.push(route);\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {RouterRoute} route\n     */\n    _addInternalRoute(routeKey: string, route: RouterRoute) {\n        if (this._routesMap.has(routeKey)) {\n            throw new Error(`duplicate routeKey: \"${routeKey}\"`);\n        }\n        this._routesMap.set(routeKey, route);\n    }\n\n    /**\n     * @param {string} path\n     * @param {string=} lang\n     * @return {Route}\n     */\n    find(path: string, lang: string = 'en'): Route {\n        path = `/${path.trim().replace(regExpStartingSlash, '').replace(regExpEndingSlash, '')}`;\n        return this._findRoute(this._routes, path, path, lang);\n    }\n\n    /**\n     * @param {Array} routes\n     * @param {string} completePath\n     * @param {string} path\n     * @param {string} lang\n     * @param {Map} namedParams\n     * @return {RouterRoute} route the route or undefined if none found\n     */\n    _findRoute(routes, completePath, path, lang, namedParams) {\n        let result;\n        routes.some((route, index) => {\n            /* RouterRouteLang */\n            let routeLang = route.get(lang);\n            if (!routeLang) {\n                throw new Error(`Cannot find routeLang for lang ${lang} and route ${index}`);\n            }\n\n            // console.log(`[springbokjs-router] trying ${routeLang.regExp}`);\n            if (this.logger) {\n                this.logger.info(`[springbokjs-router] trying ${routeLang.regExp}`);\n            }\n\n            const match = routeLang.match(path);\n            if (!match) {\n                return false;\n            }\n            // console.log(match);\n\n            match.shift(); // remove m[0];\n            let groupCount = match.length;\n\n            if (route instanceof RouterRouteSegment) {\n                const restOfThePath = match[--groupCount];\n\n                // Copy/paste... argh I hate that !\n                if (route.getNamedParamsCount() !== 0) {\n                    // set params\n                    if (!namedParams) {\n                        namedParams = new Map();\n                    }\n\n                    let group = 0;\n                    route.namedParams.forEach((paramName) => {\n                        const value = match[group++];\n                        if (value) {\n                            namedParams.set(paramName, value);\n                        }\n                    });\n                }\n\n                /* if (route.defaultRoute) {\n                    if (restOfThePath.length !== 0) {\n                        result = this._findRoute(route.subRoutes, completePath, restOfThePath, lang, namedParams);\n                    }\n                    if (!result) {\n                        result = this._createRoute(completePath, lang, route.defaultRoute, undefined, 0, namedParams);\n                    }\n                } else {*/\n                result = this._findRoute(route.subRoutes, completePath, restOfThePath, lang, namedParams);\n                // }\n            } else {\n                result = this._createRoute(completePath, lang, route, match, groupCount, namedParams);\n            }\n\n            return true;\n        });\n        return result;\n    }\n\n    /**\n     * Creates a new Route result\n     *\n     * @param {string} completePath\n     * @param {string} lang\n     * @param {RouterRoute} route\n     * @param {Array} match\n     * @param {int} groupCount\n     * @param {Map} namedParams\n     * @return {Route} route\n     */\n    _createRoute(completePath, lang, route, match, groupCount, namedParams) {\n        let group = 0;\n        let extension = groupCount === 0 || !route.extension ? undefined : match[--groupCount];\n\n        let controller = route.controller;\n        let action = route.action;\n\n        let otherParams;\n\n        if (route.getNamedParamsCount() !== 0) {\n            // set params\n            if (!namedParams) {\n                namedParams = new Map();\n            }\n\n            route.namedParams.forEach((paramName) => {\n                const value = match[group++];\n                if (value) {\n                    namedParams.set(paramName, value);\n                }\n            });\n\n            if (!namedParams.size) {\n                namedParams = undefined;\n            }\n        }\n\n        if (namedParams) {\n            // Replace controller and action if needed\n            if (namedParams.has('controller')) {\n                controller = this._routesTranslations.untranslate(namedParams.get('controller'), lang);\n                // Should we remove it ?\n                namedParams.delete('controller');\n            }\n\n            if (namedParams.has('action')) {\n                action = this._routesTranslations.untranslate(namedParams.get('action'), lang);\n                // Should we remove it ?\n                namedParams.delete('action');\n            }\n\n            if (!namedParams.size) {\n                namedParams = undefined;\n            }\n        }\n\n        // The only not-named param can be /*\n        if (group + 1 === groupCount && match[group]) {\n            otherParams = match[group].split('/');\n        }\n\n        return new Route(completePath, controller, action, namedParams, otherParams, extension);\n    }\n\n    /**\n     * Create a link\n     *\n     * @param {string} lang\n     * @param {string} routeKey\n     * @param {string} [params.extension]\n     * @param {string} [params.queryString]\n     * @param {string} [params.hash]\n     * @return {string}\n     */\n    urlGenerator(lang, routeKey, params) {\n        const route = this._routesMap.get(routeKey);\n        try {\n            return route.routes.get(lang).url(params);\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n}\n"]}