{"version":3,"sources":["../../../src/RouterBuilder/RouterBuilderSegment.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGqB,oB;;;;;;;;;;AAMjB,kCAAY,OAAZ,EAAqB,KAArB,EAA4B,MAA5B,EAAoC;AAAA;;AAChC,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,KAAL,GAAa,KAAb;AACA,aAAK,MAAL,GAAc,MAAd;AACH;;;;;;;;;;;;;;;;;;;;8BAUG,Q,EAAU,Q,EAAU,iC,EAAmC,O,EAAS;AAChE,gBAAM,QAAQ,KAAK,YAAL,CACV,QADU,EAEV,QAFU,EAGV,iCAHU,EAIV,OAJU,CAAd;AAMA,iBAAK,KAAL,CAAW,SAAX,CAAqB,IAArB,CAA0B,KAA1B;AACA,iBAAK,OAAL,CAAa,MAAb,CAAoB,iBAApB,CAAsC,QAAtC,EAAgD,KAAhD;AACA,mBAAO,IAAP;AACH;;;;;;;;;;;;;;;;;;;uCAUY,Q,EAAU,Q,EAAU,iC,EAAmC,O,EAAS;AACzE,mBAAO,KAAK,OAAL,CAAa,YAAb,CAA0B,KAA1B,EAAiC,KAAK,KAAtC,EAA6C,QAA7C,EACH,iCADG,EAEH,WAAW,QAAQ,qBAFhB,EAGH,WAAW,QAAQ,UAHhB,EAIH,WAAW,QAAQ,SAJhB,CAAP;AAKH;;;;;;;;;;;;;;;;;uCASY,Q,EAAU,iC,EAAmC,O,EAAS;AAC/D,gBAAM,QAAQ,KAAK,YAAL,CAAkB,QAAlB,EAA4B,EAA5B,EAAgC,iCAAhC,EAAmE,OAAnE,CAAd;;;AAGA,iBAAK,KAAL,CAAW,SAAX,CAAqB,IAArB,CAA0B,KAA1B;AACA,iBAAK,OAAL,CAAa,MAAb,CAAoB,iBAApB,CAAsC,QAAtC,EAAgD,KAAhD;AACA,mBAAO,IAAP;AACH;;;;;;;;;;;;;;;;;;;mCAWO,Q,EAAU,iC,EAAmC,O,EAAS;AAC1D,mBAAO,KAAK,YAAL,CAAkB,QAAlB,EAA4B,iCAA5B,EAA+D,OAA/D,CAAP;AACH;;;;;;;;;;;;;;;;qCAQU,Q,EAAU,O,EAAS,Y,EAAc;AACxC,gBAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AAC/B,+BAAe,OAAf;AACA,0BAAU,EAAV;AACH;;AAED,gBAAM,QAAQ,KAAK,OAAL,CAAa,mBAAb,CAAiC,KAAK,KAAtC,EAA6C,QAA7C,EACV,QAAQ,qBADE,EACqB,QAAQ,UAD7B,CAAd;AAEA,gBAAM,UAAU,IAAI,oBAAJ,CAAyB,KAAK,OAA9B,EAAuC,KAAvC,EAA8C,KAAK,KAAnD,CAAhB;AACA,yBAAa,OAAb;AACA,iBAAK,OAAL,CAAa,MAAb,CAAoB,QAApB,CAA6B,IAA7B,EAAmC,KAAnC;AACH;;;;;;kBA9FgB,oB","file":"RouterBuilderSegment.js","sourcesContent":["/**\n * Build a route segment\n */\nexport default class RouterBuilderSegment {\n    /**\n     * @param {RouterBuilder} builder\n     * @param {RouterRouteSegment} route\n     * @param {RouterRouteSegment} [parent]\n     */\n    constructor(builder, route, parent) {\n        this.builder = builder;\n        this.route = route;\n        this.parent = parent;\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {string} routeUrl\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} options.namedParamsDefinition\n     * @param {Map} options.routeLangs\n     * @param {string} options.extension\n     */\n    add(routeKey, routeUrl, controllerAndActionSeparatedByDot, options) {\n        const route = this._createRoute(\n            routeKey,\n            routeUrl,\n            controllerAndActionSeparatedByDot,\n            options\n        );\n        this.route.subRoutes.push(route);\n        this.builder.router._addInternalRoute(routeKey, route);\n        return this;\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {string} routeUrl\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} options.namedParamsDefinition\n     * @param {Map} options.routeLangs\n     * @param {string} options.extension\n     */\n    _createRoute(routeKey, routeUrl, controllerAndActionSeparatedByDot, options) {\n        return this.builder._createRoute(false, this.route, routeUrl,\n            controllerAndActionSeparatedByDot,\n            options && options.namedParamsDefinition,\n            options && options.routeLangs,\n            options && options.extension);\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} options.namedParamsDefinition\n     * @param {Map} options.routeLangs\n     * @param {string} options.extension\n     */\n    defaultRoute(routeKey, controllerAndActionSeparatedByDot, options) {\n        const route = this._createRoute(routeKey, '', controllerAndActionSeparatedByDot, options);\n        // this.route.defaultRoute = route;\n        // this.builder.router._addInternalRoute(routeKey, route);\n        this.route.subRoutes.push(route);\n        this.builder.router._addInternalRoute(routeKey, route);\n        return this;\n    }\n\n    /**\n     * Alias for defaultRoute\n     *\n     * @param {string} routeKey\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} options.namedParamsDefinition\n     * @param {Map} options.routeLangs\n     * @param {string} options.extension\n     */\n    default(routeKey, controllerAndActionSeparatedByDot, options) {\n        return this.defaultRoute(routeKey, controllerAndActionSeparatedByDot, options);\n    }\n\n    /**\n     * @param {string} routeUrl\n     * @param {Map} [options.namedParamsDefinition]\n     * @param {Map} [options.routeLangs]\n     * @param {Function} buildSegment\n     */\n    addSegment(routeUrl, options, buildSegment) {\n        if (typeof options === 'function') {\n            buildSegment = options;\n            options = {};\n        }\n\n        const route = this.builder._createRouteSegment(this.route, routeUrl,\n            options.namedParamsDefinition, options.routeLangs);\n        const segment = new RouterBuilderSegment(this.builder, route, this.route);\n        buildSegment(segment);\n        this.builder.router.addRoute(null, route);\n    }\n}\n"]}