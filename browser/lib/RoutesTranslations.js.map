{"version":3,"sources":["../../src/RoutesTranslations.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGqB,kB;;;;;;;;AAIjB,gCAAY,YAAZ,EAA0B;AAAA;;AACtB,aAAK,UAAL,GAAkB,IAAI,GAAJ,EAAlB;;AAEA,YAAI,CAAC,YAAL,EAAmB;AACf;AACH;;AALqB;AAAA;AAAA;;AAAA;AAOtB,iCAAmC,YAAnC,8HAAiD;AAAA;;AAAA,oBAAvC,GAAuC;AAAA,oBAAlC,eAAkC;AAAA;AAAA;AAAA;;AAAA;AAC7C,0CAAgC,eAAhC,mIAAiD;AAAA;;AAAA,4BAAvC,IAAuC;AAAA,4BAAjC,WAAiC;;AAC7C,4BAAI,CAAC,KAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,CAAL,EAAgC;AAC5B,iCAAK,UAAL,CAAgB,GAAhB,CACI,IADJ,EAEI;AACI,2CAAW,IAAI,GAAJ,EADf;AAEI,6CAAa,IAAI,GAAJ;AAFjB,6BAFJ;AAOH;;AAED,4BAAM,WAAW,KAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,CAAjB;;AAEA,iCAAS,SAAT,CAAmB,GAAnB,CAAuB,IAAI,WAAJ,EAAvB,EAA0C,WAA1C;AACA,iCAAS,WAAT,CAAqB,GAArB,CAAyB,YAAY,WAAZ,EAAzB,EAAoD,GAApD;AACH;AAhB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBhD;AAxBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBzB;;;;;;;;;;;;;;;oCAOS,M,EAAQ,I,EAAM;AACpB,qBAAS,OAAO,WAAP,EAAT;AACA,gBAAM,kBAAkB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,EAA0B,SAAlD;;AAEA,gBAAI,CAAC,gBAAgB,GAAhB,CAAoB,MAApB,CAAL,EAAkC;AAC9B,sBAAM,IAAI,KAAJ,0BAAiC,MAAjC,kBAAoD,IAApD,CAAN;AACH;;AAED,mBAAO,gBAAgB,GAAhB,CAAoB,MAApB,CAAP;AACH;;;;;;;;;;;;;;sCAOW,M,EAAQ,I,EAAM;AACtB,qBAAS,OAAO,WAAP,EAAT;AACA,gBAAM,kBAAkB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,EAA0B,WAAlD;;AAEA,gBAAI,CAAC,gBAAgB,GAAhB,CAAoB,MAApB,CAAL,EAAkC;AAC9B,sBAAM,IAAI,KAAJ,4BAAmC,MAAnC,kBAAsD,IAAtD,CAAN;AACH;;AAED,mBAAO,gBAAgB,GAAhB,CAAoB,MAApB,CAAP;AACH;;;;;;kBA7DgB,kB","file":"RoutesTranslations.js","sourcesContent":["/**\n * Convert a simple conf file key=>value into a two-way translation map\n */\nexport default class RoutesTranslations {\n    /**\n     * @param {Map} translations\n     */\n    constructor(translations) {\n        this._languages = new Map();\n\n        if (!translations) {\n            return;\n        }\n\n        for (let [key, translationsMap] of translations) {\n            for (let [lang, translation] of translationsMap) {\n                if (!this._languages.has(lang)) {\n                    this._languages.set(\n                        lang,\n                        {\n                            translate: new Map(),\n                            untranslate: new Map(),\n                        }\n                    );\n                }\n\n                const language = this._languages.get(lang);\n\n                language.translate.set(key.toLowerCase(), translation);\n                language.untranslate.set(translation.toLowerCase(), key);\n            }\n        }\n    }\n\n    /**\n     * @param {string} string\n     * @param {string} lang\n     * @return {string}\n     */\n    translate(string, lang) {\n        string = string.toLowerCase();\n        const translationsMap = this._languages.get(lang).translate;\n\n        if (!translationsMap.has(string)) {\n            throw new Error(`Missing translation ${string} for lang ${lang}`);\n        }\n\n        return translationsMap.get(string);\n    }\n\n    /**\n     * @param {string} string\n     * @param {string} lang\n     * @return {string}\n     */\n    untranslate(string, lang) {\n        string = string.toLowerCase();\n        const translationsMap = this._languages.get(lang).untranslate;\n\n        if (!translationsMap.has(string)) {\n            throw new Error(`Missing untranslation ${string} for lang ${lang}`);\n        }\n\n        return translationsMap.get(string);\n    }\n}\n"]}