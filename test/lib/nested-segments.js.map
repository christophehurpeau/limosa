{"version":3,"sources":["../src/nested-segments.js"],"names":[],"mappings":"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","file":"nested-segments.js","sourcesContent":["/* global test */\nimport RouterBuilder from '../../lib/RouterBuilder/RouterBuilder';\nimport RouteTranslations from '../../lib/RoutesTranslations';\n\nimport { ok, strictEqual } from 'assert';\n\n// const routesLangsConfig = fs.readYamlFileSync('example/routesLangs.yml');\nconst routesLangsConfig = new Map([\n    ['api', new Map([['en', 'api']])],\n    ['rooms', new Map([['en', 'rooms']])],\n    ['book', new Map([['en', 'book']])],\n]);\n\nconst routesTranslations = new RouteTranslations(routesLangsConfig);\n\nconst builder = new RouterBuilder(routesTranslations, ['en']);\nconst router = builder.router;\n\nbuilder\n    .addSegment('/api', segment => {\n        segment.addSegment('/rooms', segment => {\n            segment.addSegment('/${roomName}', segment => {\n                segment.add('api/room/book', '/book', 'api.room/book');\n                segment.defaultRoute('api/room', 'api.room');\n            });\n            segment.defaultRoute('api/rooms', 'api.rooms');\n        });\n    });\n\nconst routes = router._routes;\n\ntest('router routes regExp, in order', () => {\n    strictEqual(routes.length, 1);\n    const apiRoute = routes[0];\n    strictEqual(apiRoute.routes.get('en').regExp.source, /^\\/api(.*)$/.source);\n    strictEqual(apiRoute.subRoutes.length, 1);\n    strictEqual(apiRoute.subRoutes[0].get('en').regExp.source, /^\\/rooms(.*)$/.source);\n\n    const roomsRoute = apiRoute.subRoutes[0];\n    strictEqual(roomsRoute.subRoutes.length, 2);\n    strictEqual(roomsRoute.subRoutes[0].get('en').regExp.source, /^\\/([^\\/.]+)(.*)$/.source);\n\n    const namedRoomRoute = roomsRoute.subRoutes[0];\n    strictEqual(namedRoomRoute.subRoutes.length, 2);\n    strictEqual(namedRoomRoute.subRoutes[0].get('en').regExp.source, /^\\/book$/.source);\n    strictEqual(namedRoomRoute.subRoutes[1].get('en').regExp.source, /^$/.source);\n});\n\ntest('api/room generate url', () => {\n    let rr = router.get('api/room');\n    ok(rr != null);\n    let en = rr.get('en');\n\n    strictEqual(en.url({ roomName: 'tokyo' }), '/api/rooms/tokyo');\n});\n\ntest('find /api/rooms/tokyo', () => {\n    let r = router.find('/api/rooms/tokyo', 'en');\n    ok(r != null);\n    strictEqual(r.all, '/api/rooms/tokyo');\n    strictEqual(r.controller, 'api');\n    strictEqual(r.action, 'room');\n    strictEqual(r.namedParams.size, 1);\n    strictEqual(r.namedParams.get('roomName'), 'tokyo');\n});\n"]}