{"version":3,"sources":["../src/builder.js"],"names":[],"mappings":"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","file":"builder.js","sourcesContent":["/* global suite, test, setup, teardown */\nimport RouterBuilder from '../../lib/RouterBuilder/RouterBuilder';\nimport RouteTranslations from '../../lib/RoutesTranslations';\nimport { ok, strictEqual, deepEqual } from 'assert';\n\nconst routesLangsConfig = new Map([\n    ['post', new Map([['en', 'post'], ['fr', 'article']])],\n    ['view', new Map([['en', 'view'], ['fr', 'afficher']])],\n]);\n\nconst routesTranslations = new RouteTranslations(routesLangsConfig);\n\n\nsuite('builder', () => {\n    let builder;\n    setup(() => builder = new RouterBuilder(routesTranslations, ['en', 'fr']));\n    teardown(() => builder = null);\n\n    suite('home', () => {\n        const testHome = () => {\n            const router = builder.router;\n            const rr = router.get('home');\n            ok(rr != null);\n            strictEqual(rr.controller, 'site');\n            strictEqual(rr.action, 'index');\n            strictEqual(rr.getNamedParamsCount(), 0);\n            const en = rr.get('en');\n            strictEqual(en.regExp.source, '^\\\\/$');\n            strictEqual(en.url(), '/');\n            const fr = rr.get('fr');\n            strictEqual(fr.regExp.source, '^\\\\/$');\n            strictEqual(fr.url(), '/');\n        };\n\n        test('add home route, with arguments', () => {\n            builder.add('home', '/', 'site.index');\n            testHome();\n        });\n\n\n        test('add home route, with object', () => {\n            builder.add({ key: 'home', url: '/', controller: 'site', action: 'index' });\n            testHome();\n        });\n    });\n\n    suite('default routes', () => {\n        setup(() => builder.addDefaultRoutes());\n\n        suite('defaultSimple', () => {\n            const getRoute = () => builder.router.get('defaultSimple');\n            const getRouteLang = (lang) => getRoute().get(lang);\n\n            test('exists', () => ok(getRoute()));\n            test('controller is site', () => strictEqual(getRoute().controller, 'site'));\n            test('action is index', () => strictEqual(getRoute().action, 'index'));\n            test('has no named params', () => strictEqual(getRoute().getNamedParamsCount(), 0));\n\n            test('has \"en\" route', () => ok(getRouteLang('en')));\n            test('check \"en\" route regexp', () => strictEqual(\n                getRouteLang('en').regExp.source,\n                '^(?:\\\\.(html))?$',\n            ));\n            test('check \"en\" url generator', () => strictEqual(\n                getRouteLang('en').url({ controller: 'post' }),\n                '/post.html',\n            ));\n\n            test('has \"fr\" route', () => ok(getRouteLang('fr')));\n            test('check \"fr\" route regexp', () => strictEqual(\n                getRouteLang('fr').regExp.source,\n                '^(?:\\\\.(html))?$',\n            ));\n            test('check \"fr\" url generator', () => strictEqual(\n                getRouteLang('fr').url({ controller: 'post' }),\n                '/article.html',\n            ));\n        });\n\n        suite('default', () => {\n            const getRoute = () => builder.router.get('default');\n            const getRouteLang = (lang) => getRoute().get(lang);\n\n            test('exists', () => ok(getRoute()));\n            test('controller is site', () => strictEqual(getRoute().controller, 'site'));\n            test('action is index', () => strictEqual(getRoute().action, 'index'));\n            test('has 1 named params', () => strictEqual(getRoute().getNamedParamsCount(), 1));\n            test('named param is \"action\"', () => deepEqual(getRoute().namedParams, ['action']));\n\n            test('has \"en\" route', () => ok(getRouteLang('en')));\n            test('check \"en\" route regexp', () => strictEqual(\n                getRouteLang('en').regExp.source,\n                /^\\/([^\\/.]+)(?:\\/([^.]*))?(?:\\.(html))?$/.source,\n            ));\n            test('check \"en\" url generator', () => strictEqual(\n                getRouteLang('en').url({ controller: 'post', action: 'view' }),\n                '/post/view.html',\n            ));\n\n            test('has \"fr\" route', () => ok(getRouteLang('fr')));\n            test('check \"fr\" route regexp', () => strictEqual(\n                getRouteLang('fr').regExp.source,\n                /^\\/([^\\/.]+)(?:\\/([^.]*))?(?:\\.(html))?$/.source,\n            ));\n            test('check \"fr\" url generator', () => strictEqual(\n                getRouteLang('fr').url({ controller: 'post', action: 'view' }),\n                '/article/afficher.html',\n            ));\n        });\n    });\n});\n"]}