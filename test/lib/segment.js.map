{"version":3,"sources":["../src/segment.js"],"names":[],"mappings":"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","file":"segment.js","sourcesContent":["/* global test */\nimport RouterBuilder from '../../lib/RouterBuilder/RouterBuilder';\nimport RouteTranslations from '../../lib/RoutesTranslations';\n\nimport { ok, strictEqual, deepEqual } from 'assert';\n\n// const routesLangsConfig = fs.readYamlFileSync('example/routesLangs.yml');\nconst routesLangsConfig = new Map([\n    ['login', new Map([['en', 'login']])],\n    ['response', new Map([['en', 'response']])],\n]);\n\nconst routesTranslations = new RouteTranslations(routesLangsConfig);\n\nconst builder = new RouterBuilder(routesTranslations, ['en']);\nconst router = builder.router;\n\nbuilder\n    .add('/', '/', 'site.index')\n    .addSegment('/login[/${strategy}]', {}, (segment) => {\n        segment\n            .add('loginResponse', '/response', 'site.loginResponse')\n            .defaultRoute('login', 'site.login');\n    })\n    .add('default', '/${action}', 'default.index');\n\nconst routes = router._routes;\n\ntest('router routes regExp, in order', () => {\n    strictEqual(routes[0].routes.get('en').regExp.source, /^\\/$/.source);\n    strictEqual(routes[1].routes.get('en').regExp.source, /^\\/login(?:\\/([^\\/.]+))?(.*)$/.source);\n    strictEqual(routes[2].routes.get('en').regExp.source, /^\\/([^\\/.]+)$/.source);\n});\n\n\ntest('login segment', () => {\n    const route = routes[1];\n\n    deepEqual(route.namedParams, ['strategy']);\n    strictEqual(route.subRoutes.length, 2);\n});\n\ntest('login segment subRoute loginResponse', () => {\n    const route = routes[1];\n    const subRouteLoginResponse = route.subRoutes[0];\n    strictEqual(subRouteLoginResponse, router.get('loginResponse'));\n});\n\ntest('login segment subRoute login', () => {\n    const route = routes[1];\n    const subRouteLogin = route.subRoutes[1];\n    strictEqual(subRouteLogin, router.get('login'));\n});\n\ntest('login url', () => {\n    let rr = router.get('login');\n    ok(rr != null);\n    strictEqual(rr.controller, 'site');\n    strictEqual(rr.action, 'login');\n\n    let en = rr.get('en');\n    strictEqual(en.url(), '/login');\n    strictEqual(en.url({ strategy: 'google' }), '/login/google');\n});\n\ntest('loginResponse url', () => {\n    let rr = router.get('loginResponse');\n    ok(rr != null);\n    strictEqual(rr.controller, 'site');\n    strictEqual(rr.action, 'loginResponse');\n\n    let en = rr.get('en');\n    strictEqual(en.url(), '/login/response');\n    strictEqual(en.url({ strategy: 'google' }), '/login/google/response');\n});\n\ntest('find /login', () => {\n    let r = router.find('/login', 'en');\n    ok(r != null);\n    strictEqual(r.all, '/login');\n    strictEqual(r.controller, 'site');\n    strictEqual(r.action, 'login');\n});\n\ntest('find /login/google', () => {\n    let r = router.find('/login/google', 'en');\n    ok(r != null);\n    strictEqual(r.all, '/login/google');\n    strictEqual(r.controller, 'site');\n    strictEqual(r.action, 'login');\n    strictEqual(r.namedParams.size, 1);\n    strictEqual(r.namedParams.get('strategy'), 'google');\n});\n\n\ntest('find /login/google/response', () => {\n    let r = router.find('/login/google/response', 'en');\n    ok(r != null);\n    strictEqual(r.all, '/login/google/response');\n    strictEqual(r.controller, 'site');\n    strictEqual(r.action, 'loginResponse');\n    strictEqual(r.namedParams.size, 1);\n    strictEqual(r.namedParams.get('strategy'), 'google');\n});\n"]}