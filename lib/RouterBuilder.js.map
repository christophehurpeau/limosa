{"version":3,"sources":["../src/RouterBuilder.js"],"names":[],"mappings":"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","file":"RouterBuilder.js","sourcesContent":["import object2map from 'object2map';\nimport Router from './Router';\n// import RouterRouteCommon from './RouterRoute/Common';\nimport RouterRoute from './RouterRoute/Route';\nimport RouterRouteSegment from './RouterRoute/Segment';\nimport RouterRouteLang from './RouterRoute/Lang';\nimport UrlGenerator from './UrlGenerator/UrlGenerator';\nimport UrlGeneratorNamedParamPart from './UrlGenerator/UrlGeneratorNamedParamPart';\nimport UrlGeneratorOptionalGroupPart from './UrlGenerator/UrlGeneratorOptionalGroupPart';\nimport UrlGeneratorPartArray from './UrlGenerator/UrlGeneratorPartArray';\nimport UrlGeneratorStringPart from './UrlGenerator/UrlGeneratorStringPart';\n\n// const regExpStartingSlash = /^\\/+/;\n// const regExpEndingSlash = /\\/+$/;\n\n/**\n * Build a route segment\n */\nclass RouterBuilderSegment {\n    /**\n     * @param {RouterBuilder} builder\n     * @param {RouterRouteSegment} route\n     * @param {RouterRouteSegment} [parent]\n     */\n    constructor(builder, route, parent) {\n        this.builder = builder;\n        this.route = route;\n        this.parent = parent;\n    }\n\n    /**\n     * @param {String} routeKey\n     * @param {String} routeUrl\n     * @param {String} controllerAndActionSeparatedByDot\n     * @param {Object} options namedParamsDefinition, routeLangs, extension\n     */\n    add(routeKey, routeUrl, controllerAndActionSeparatedByDot, options) {\n        const route = this._createRoute(routeKey, routeUrl, controllerAndActionSeparatedByDot, options);\n        this.route.subRoutes.push(route);\n        this.builder.router._addInternalRoute(routeKey, route);\n        return this;\n    }\n\n    /**\n     * @param {String} routeKey\n     * @param {String} routeUrl\n     * @param {String} controllerAndActionSeparatedByDot\n     * @param {Object} options namedParamsDefinition, routeLangs, extension\n     */\n    _createRoute(routeKey, routeUrl, controllerAndActionSeparatedByDot, options) {\n        return this.builder._createRoute(false, this.route, routeUrl,\n                            controllerAndActionSeparatedByDot,\n                            options && options.namedParamsDefinition,\n                            options && options.routeLangs,\n                            options && options.extension);\n    }\n\n    /**\n     * @param {String} routeKey\n     * @param {String} controllerAndActionSeparatedByDot\n     * @param {Object} options namedParamsDefinition, routeLangs, extension\n     */\n    defaultRoute(routeKey, controllerAndActionSeparatedByDot, options) {\n        const route = this._createRoute(routeKey, '', controllerAndActionSeparatedByDot, options);\n        // this.route.defaultRoute = route;\n        // this.builder.router._addInternalRoute(routeKey, route);\n        this.route.subRoutes.push(route);\n        this.builder.router._addInternalRoute(routeKey, route);\n        return this;\n    }\n\n    /**\n     * @param {String} routeUrl\n     * @param {Object} [options] namedParamsDefinition, routeLangs\n     * @param {Function} buildSegment\n     */\n    addSegment(routeUrl, options, buildSegment) {\n        if (typeof options === 'function') {\n            buildSegment = options;\n            options = {};\n        }\n\n        const route = this.builder._createRouteSegment(this.route, routeUrl,\n                            options.namedParamsDefinition, options.routeLangs);\n        const segment = new RouterBuilderSegment(this.buider, route, this.route);\n        buildSegment(segment);\n        this.router.addRoute(null, route);\n    }\n}\n\n/**\n * @class\n */\nexport default class RouterBuilder {\n    /**\n     * @constructs\n     * @param {RoutesTranslations} routesTranslations\n     * @param {Array} allLangs Array of all langs\n     */\n    constructor(routesTranslations, allLangs) {\n        this._routesTranslations = routesTranslations;\n        this._allLangs = allLangs;\n        this.router = new Router(routesTranslations);\n\n        this.regExpNamedParam = /\\$\\{([a-zA-Z]+)}/g;\n        this.translatableRoutePart = /\\/([a-zA-Z_]+)/g;\n        this.translatableRouteNamedParamValue = /^[a-zA-Z\\|_]+$/g;\n        this.regExpNamedParamOrOptionalPart = /(?:\\$\\{([a-zA-Z]+)})|(?:\\[([^\\]]+)\\])/g;\n    }\n\n    /**\n     * @param {String} lang\n     * @param {String} string\n     * @return {String}\n     */\n    translate(lang, string) {\n        const lstring = string.toLowerCase();\n        const translation = this._routesTranslations.translate(lstring, lang);\n        return translation;\n    }\n\n    /**\n     * @param {Map} routes\n     */\n    fromMap(routes) {\n        routes.forEach(function(route, routeKey) {\n            this.add(routeKey, routeKey, route[0], {\n                namedParamsDefinition: route.length > 1 ? route[1] : undefined,\n                routeLangs: route.length > 2 ? (route[2] || {}) : {},\n                extension: route.length > 3 ? route[3] : undefined,\n            });\n        });\n    }\n\n    /**\n     * @param {String} routeKey\n     * @param {String} routeUrl\n     * @param {String} controllerAndActionSeparatedByDot\n     * @param {Object} options namedParamsDefinition, routeLangs, extension\n     */\n    add(routeKey, routeUrl, controllerAndActionSeparatedByDot, options) {\n        const route = this._createRoute(false, undefined, routeUrl, controllerAndActionSeparatedByDot,\n                            options && options.namedParamsDefinition,\n                            options && options.routeLangs,\n                            options && options.extension);\n        this.router.addRoute(routeKey, route);\n        return this;\n    }\n\n    /**\n     * @param {String} routeUrl\n     * @param {Object} [options] namedParamsDefinition, routeLangs\n     * @param {Function} buildSegment\n     */\n    addSegment(routeUrl, options, buildSegment) {\n        if (typeof options === 'function') {\n            buildSegment = options;\n            options = {};\n        }\n\n        const route = this._createRouteSegment(undefined, routeUrl,\n                            options.namedParamsDefinition, options.routeLangs);\n        const segment = new RouterBuilderSegment(this, route, undefined);\n        buildSegment(segment);\n        this.router.addRoute(undefined, route);\n        return this;\n    }\n\n    /**\n     * @param {RouterRouteSegment} parent\n     * @param {String} routeUrl\n     * @param {Map} namedParamsDefinition\n     * @param {Map} routeLangs\n     * @return {_RouterRouteCommon}\n     */\n    _createRouteSegment(parent, routeUrl, namedParamsDefinition, routeLangs) {\n        return this._createRoute(true, parent, routeUrl, undefined, namedParamsDefinition, routeLangs, undefined);\n    }\n\n    /**\n     * @param {bool} segment\n     * @param {RouterRouteSegment} parent\n     * @param {String} routeUrl\n     * @param {String} controllerAndActionSeparatedByDot\n     * @param {Map} namedParamsDefinition\n     * @param {Map} routeLangs\n     * @param {String} extension\n     * @return {_RouterRouteCommon}\n     */\n    _createRoute(segment, parent, routeUrl, controllerAndActionSeparatedByDot,\n                        namedParamsDefinition, routeLangs, extension) {\n        let controllerAndAction;\n        if (!segment) {\n            controllerAndAction = controllerAndActionSeparatedByDot.split('.');\n            // assert(controllerAndAction.length == 2);\n        }\n\n        if (routeLangs == null) {\n            routeLangs = new Map();\n        } else {\n            routeLangs = object2map(routeLangs);\n        }\n\n        // -- Route langs --\n\n        if (routeLangs.size !== 0) {\n            this._allLangs.forEach((lang) => {\n                if (!routeLangs.has(lang)) {\n                    if (lang == 'en') {\n                        routeLangs.set('en', routeUrl);\n                    } else {\n                        throw new Error(`Missing lang ${lang}\" for route \"${routeUrl}\"`);\n                    }\n                }\n            });\n        } else if (!routeUrl.match(this.translatableRoutePart)) {\n            this._allLangs.forEach((lang) => {\n                routeLangs.set(lang, routeUrl);\n            });\n        } else {\n            this._allLangs.forEach((lang) => {\n                routeLangs.set(lang, routeUrl.replace(this.translatableRoutePart,\n                  (str, p1) => '/' + this.translate(lang, p1)));\n            });\n        }\n\n        const paramNames = [];\n        routeLangs.get(this._allLangs[0]).replace(this.regExpNamedParam, (str, paramName) => {\n            paramNames.push(paramName);\n        });\n        // console.log(routeLangs[this._allLangs[0]], paramNames);\n\n        const finalRoute = segment ? new RouterRouteSegment(paramNames)\n            : new RouterRoute(controllerAndAction[0], controllerAndAction[1], extension, paramNames);\n\n        routeLangs.forEach((routeLang, lang) => {\n            const translate = this.translate.bind(this, lang);\n            let specialEnd = false;\n            let specialEnd2 = false;\n            let routeLangRegExp;\n\n            if (!segment && (specialEnd = routeLang.endsWith('/*'))) {\n                routeLangRegExp = routeLang.slice(0, -2);\n            } else if (!segment && (specialEnd2 = routeLang.endsWith('/*]'))) {\n                routeLangRegExp = routeLang.slice(0, -3) + routeLang.slice(-1);\n            } else {\n                routeLangRegExp = routeLang;\n            }\n\n            routeLangRegExp = routeLangRegExp\n                .replace(/\\//g, '\\\\/')\n                .replace(/\\-/g, '\\\\-')\n                .replace(/\\*/g, '(.*)')\n                .replace(/\\[/g, '(')\n                .replace(/]/g, ')')\n                .replace(/\\(/g, '(?:');\n\n            if (specialEnd) {\n                routeLangRegExp = routeLangRegExp + '(?:\\\\/([^.]*))?';\n            } else if (specialEnd2) {\n                // ends now is : /*)?\n                routeLangRegExp = routeLangRegExp.slice(0, -2) + '(?:\\\\/(.*))?' + routeLangRegExp.slice(-2);\n            }\n\n            const extensionRegExp = (() => {\n                if (segment || extension == null) {\n                    return '';\n                }\n\n                if (extension == 'html') {\n                    return '(?:\\\\.(html))?';\n                }\n\n                return '\\\\.(' + extension + ')';\n            })();\n\n            const replacedRegExp = routeLangRegExp.replace(this.regExpNamedParam, (str, paramName) => {\n                if (namedParamsDefinition && namedParamsDefinition[paramName]) {\n                    let paramDefVal = namedParamsDefinition[paramName];\n                    if (typeof paramDefVal === 'string') {\n                        if (paramDefVal.match(this.translatableRouteNamedParamValue)) {\n                            paramDefVal = paramDefVal.split('|').map(translate).join('|');\n                        }\n                    } else if (paramDefVal instanceof RegExp) {\n                        paramDefVal = paramDefVal.source;\n                    } else {\n                        paramDefVal = paramDefVal[lang];\n                    }\n\n                    return paramDefVal == 'id' ? '([0-9]+)' : '(' + paramDefVal.replace('(', '(?:') + ')';\n                }\n\n                if (paramName === 'id') {\n                    return '([0-9]+)';\n                }\n\n                return '([^\\\\/.]+)';\n            });\n\n            if (!segment && specialEnd) {\n                routeLang = routeLang.slice(0, -2);\n            } else if (!segment && specialEnd2) {\n                routeLang = routeLang.slice(0, -3) + routeLang.slice(-1);\n            }\n\n            const regExpNamedParamOrOptionalPart = this.regExpNamedParamOrOptionalPart;\n            const parts = routeLang.length === 0 ? null : (function buildParts(routeLangPart) {\n                const parts = [];\n                let index = 0;\n                routeLangPart.replace(regExpNamedParamOrOptionalPart, (match, paramName, optionalGroup, offset) => {\n                    if (offset > index) {\n                        parts.push(new UrlGeneratorStringPart(routeLang.substring(index, offset)));\n                    }\n\n                    index = offset + match.length;\n\n                    if (optionalGroup) {\n                        const optionalGroupParts = buildParts(optionalGroup);\n                        parts.push(new UrlGeneratorOptionalGroupPart(optionalGroupParts));\n                    } else {\n                        parts.push(new UrlGeneratorNamedParamPart(paramName, translate));\n                    }\n\n                    return match;\n                });\n\n                if (index < routeLangPart.length) {\n                    parts.push(new UrlGeneratorStringPart(routeLang.substring(index)));\n                }\n\n                if (parts.length === 0) {\n                    throw new Error(routeLangPart);\n                }\n\n                return new UrlGeneratorPartArray(parts);\n            })(routeLang);\n\n            let urlGeneratorParts;\n            if (parent != null) {\n                const parentParts = parent.routes.get(lang).urlGenerator.parts;\n                const mergedParts = parts === null ? parentParts : new UrlGeneratorPartArray([parentParts, parts]);\n                urlGeneratorParts = new UrlGenerator(mergedParts, extension);\n            } else {\n                urlGeneratorParts = new UrlGenerator(parts, extension);\n            }\n\n            finalRoute.set(lang, new RouterRouteLang(\n                new RegExp('^' + replacedRegExp + extensionRegExp + (segment ? '(.*)$' : '$')),\n                urlGeneratorParts\n            ));\n        });\n\n        return finalRoute;\n    }\n\n    /**\n     * Add default routes\n     */\n    addDefaultRoutes() {\n        this.addSegment('/${controller}', { extension: 'html' }, (segment) => {\n            segment\n                .add('default', '/${action}/*', 'site.index', { extension: 'html' })\n                .defaultRoute('defaultSimple', 'site.index', { extension: 'html' });\n        });\n\n        return this;\n    }\n}\n"]}