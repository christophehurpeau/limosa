{"version":3,"sources":["../src/RouterBuilder.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBM,uBAAN,MAAM,oBAAN,CAA2B;;;;;;AAMvB,gBAAY,OAAZ,EAAqB,KAArB,EAA4B,MAA5B,EAAoC;AAChC,aAAK,OAAL,GAAe,OAAf,CADgC;AAEhC,aAAK,KAAL,GAAa,KAAb,CAFgC;AAGhC,aAAK,MAAL,GAAc,MAAd,CAHgC;KAApC;;;;;;;;;;;AANuB,OAoBvB,CAAI,QAAJ,EAAc,QAAd,EAAwB,iCAAxB,EAA2D,OAA3D,EAAoE;AAChE,cAAM,QAAQ,KAAK,YAAL,CAAkB,QAAlB,EAA4B,QAA5B,EAAsC,iCAAtC,EAAyE,OAAzE,CAAR,CAD0D;AAEhE,aAAK,KAAL,CAAW,SAAX,CAAqB,IAArB,CAA0B,KAA1B,EAFgE;AAGhE,aAAK,OAAL,CAAa,MAAb,CAAoB,iBAApB,CAAsC,QAAtC,EAAgD,KAAhD,EAHgE;AAIhE,eAAO,IAAP,CAJgE;KAApE;;;;;;;;;;;AApBuB,gBAmCvB,CAAa,QAAb,EAAuB,QAAvB,EAAiC,iCAAjC,EAAoE,OAApE,EAA6E;AACzE,eAAO,KAAK,OAAL,CAAa,YAAb,CAA0B,KAA1B,EAAiC,KAAK,KAAL,EAAY,QAA7C,EACa,iCADb,EAEa,WAAW,QAAQ,qBAAR,EACX,WAAW,QAAQ,UAAR,EACX,WAAW,QAAQ,SAAR,CAJ/B,CADyE;KAA7E;;;;;;;;;;AAnCuB,gBAkDvB,CAAa,QAAb,EAAuB,iCAAvB,EAA0D,OAA1D,EAAmE;AAC/D,cAAM,QAAQ,KAAK,YAAL,CAAkB,QAAlB,EAA4B,EAA5B,EAAgC,iCAAhC,EAAmE,OAAnE,CAAR;;;AADyD,YAI/D,CAAK,KAAL,CAAW,SAAX,CAAqB,IAArB,CAA0B,KAA1B,EAJ+D;AAK/D,aAAK,OAAL,CAAa,MAAb,CAAoB,iBAApB,CAAsC,QAAtC,EAAgD,KAAhD,EAL+D;AAM/D,eAAO,IAAP,CAN+D;KAAnE;;;;;;;;;AAlDuB,cAiEvB,CAAW,QAAX,EAAqB,OAArB,EAA8B,YAA9B,EAA4C;AACxC,YAAI,OAAO,OAAP,KAAmB,UAAnB,EAA+B;AAC/B,2BAAe,OAAf,CAD+B;AAE/B,sBAAU,EAAV,CAF+B;SAAnC;;AAKA,cAAM,QAAQ,KAAK,OAAL,CAAa,mBAAb,CAAiC,KAAK,KAAL,EAAY,QAA7C,EACM,QAAQ,qBAAR,EAA+B,QAAQ,UAAR,CAD7C,CANkC;AAQxC,cAAM,UAAU,IAAI,oBAAJ,CAAyB,KAAK,MAAL,EAAa,KAAtC,EAA6C,KAAK,KAAL,CAAvD,CARkC;AASxC,qBAAa,OAAb,EATwC;AAUxC,aAAK,MAAL,CAAY,QAAZ,CAAqB,IAArB,EAA2B,KAA3B,EAVwC;KAA5C;CAjEJ;IA+EqB,gBAAN,MAAM,aAAN,CAAoB;;;;;AAK/B,gBAAY,kBAAZ,EAAgC,QAAhC,EAA0C;AACtC,aAAK,mBAAL,GAA2B,kBAA3B,CADsC;AAEtC,aAAK,SAAL,GAAiB,QAAjB,CAFsC;AAGtC,aAAK,MAAL,GAAc,qBAAW,kBAAX,CAAd,CAHsC;;AAKtC,aAAK,gBAAL,GAAwB,mBAAxB,CALsC;AAMtC,aAAK,qBAAL,GAA6B,iBAA7B,CANsC;AAOtC,aAAK,gCAAL,GAAwC,iBAAxC,CAPsC;AAQtC,aAAK,8BAAL,GAAsC,wCAAtC,CARsC;KAA1C;;;;;;;AAL+B,aAqB/B,CAAU,IAAV,EAAgB,MAAhB,EAAwB;AACpB,cAAM,UAAU,OAAO,WAAP,EAAV,CADc;AAEpB,cAAM,cAAc,KAAK,mBAAL,CAAyB,SAAzB,CAAmC,OAAnC,EAA4C,IAA5C,CAAd,CAFc;AAGpB,eAAO,WAAP,CAHoB;KAAxB;;;;;AArB+B,WA8B/B,CAAQ,MAAR,EAAgB;AACZ,eAAO,OAAP,CAAe,CAAC,KAAD,EAAQ,QAAR,KAAqB;AAChC,iBAAK,GAAL,CAAS,QAAT,EAAmB,QAAnB,EAA6B,MAAM,CAAN,CAA7B,EAAuC;AACnC,uCAAuB,MAAM,MAAN,GAAe,CAAf,GAAmB,MAAM,CAAN,CAAnB,GAA8B,SAA9B;AACvB,4BAAY,MAAM,MAAN,GAAe,CAAf,GAAoB,MAAM,CAAN,KAAY,EAAZ,GAAkB,EAAtC;AACZ,2BAAW,MAAM,MAAN,GAAe,CAAf,GAAmB,MAAM,CAAN,CAAnB,GAA8B,SAA9B;aAHf,EADgC;SAArB,CAAf,CADY;KAAhB;;;;;;;;;;;AA9B+B,OAgD/B,CAAI,QAAJ,EAAc,QAAd,EAAwB,iCAAxB,EAA2D,OAA3D,EAAoE;AAChE,cAAM,QAAQ,KAAK,YAAL,CAAkB,KAAlB,EAAyB,SAAzB,EAAoC,QAApC,EAA8C,iCAA9C,EACM,WAAW,QAAQ,qBAAR,EACX,WAAW,QAAQ,UAAR,EACX,WAAW,QAAQ,SAAR,CAHzB,CAD0D;AAKhE,aAAK,MAAL,CAAY,QAAZ,CAAqB,QAArB,EAA+B,KAA/B,EALgE;AAMhE,eAAO,IAAP,CANgE;KAApE;;;;;;;;;AAhD+B,cA+D/B,CAAW,QAAX,EAAqB,OAArB,EAA8B,YAA9B,EAA4C;AACxC,YAAI,OAAO,OAAP,KAAmB,UAAnB,EAA+B;AAC/B,2BAAe,OAAf,CAD+B;AAE/B,sBAAU,EAAV,CAF+B;SAAnC;;AAKA,cAAM,QAAQ,KAAK,mBAAL,CAAyB,SAAzB,EAAoC,QAApC,EACM,QAAQ,qBAAR,EAA+B,QAAQ,UAAR,CAD7C,CANkC;AAQxC,cAAM,UAAU,IAAI,oBAAJ,CAAyB,IAAzB,EAA+B,KAA/B,EAAsC,SAAtC,CAAV,CARkC;AASxC,qBAAa,OAAb,EATwC;AAUxC,aAAK,MAAL,CAAY,QAAZ,CAAqB,SAArB,EAAgC,KAAhC,EAVwC;AAWxC,eAAO,IAAP,CAXwC;KAA5C;;;;;;;;;AA/D+B,uBAoF/B,CAAoB,MAApB,EAA4B,QAA5B,EAAsC,qBAAtC,EAA6D,UAA7D,EAAyE;AACrE,eAAO,KAAK,YAAL,CAAkB,IAAlB,EAAwB,MAAxB,EAAgC,QAAhC,EAA0C,SAA1C,EAAqD,qBAArD,EAA4E,UAA5E,EAAwF,SAAxF,CAAP,CADqE;KAAzE;;;;;;;;;;;;AApF+B,gBAkG/B,CAAa,OAAb,EAAsB,MAAtB,EAA8B,QAA9B,EAAwC,iCAAxC,EACoB,qBADpB,EAC2C,UAD3C,EACuD,SADvD,EACkE;AAC9D,YAAI,mBAAJ,CAD8D;AAE9D,YAAI,CAAC,OAAD,EAAU;AACV,kCAAsB,kCAAkC,KAAlC,CAAwC,GAAxC,CAAtB;;AADU,SAAd;;AAKA,YAAI,cAAc,IAAd,EAAoB;AACpB,yBAAa,IAAI,GAAJ,EAAb,CADoB;SAAxB,MAEO;AACH,yBAAa,0BAAW,UAAX,CAAb,CADG;SAFP;;;;AAP8D,YAe1D,WAAW,IAAX,KAAoB,CAApB,EAAuB;AACvB,iBAAK,SAAL,CAAe,OAAf,CAAuB,QAAU;AAC7B,oBAAI,CAAC,WAAW,GAAX,CAAe,IAAf,CAAD,EAAuB;AACvB,wBAAI,QAAQ,IAAR,EAAc;AACd,mCAAW,GAAX,CAAe,IAAf,EAAqB,QAArB,EADc;qBAAlB,MAEO;AACH,8BAAM,IAAI,KAAJ,CAAU,CAAC,aAAD,GAAgB,IAAhB,EAAqB,aAArB,GAAoC,QAApC,EAA6C,CAA7C,CAAV,CAAN,CADG;qBAFP;iBADJ;aADmB,CAAvB,CADuB;SAA3B,MAUO,IAAI,CAAC,SAAS,KAAT,CAAe,KAAK,qBAAL,CAAhB,EAA6C;AACpD,iBAAK,SAAL,CAAe,OAAf,CAAuB,QAAU;AAC7B,2BAAW,GAAX,CAAe,IAAf,EAAqB,QAArB,EAD6B;aAAV,CAAvB,CADoD;SAAjD,MAIA;AACH,iBAAK,SAAL,CAAe,OAAf,CAAuB,QAAQ;AAC3B,2BAAW,GAAX,CACI,IADJ,EAEI,SAAS,OAAT,CACI,KAAK,qBAAL,EACA,CAAC,GAAD,EAAM,EAAN,KAAa,CAAC,CAAD,GAAI,KAAK,SAAL,CAAe,IAAf,EAAqB,EAArB,CAAJ,EAA6B,CAA1C,CAJR,EAD2B;aAAR,CAAvB,CADG;SAJA;;AAeP,cAAM,aAAa,EAAb,CAxCwD;AAyC9D,mBAAW,GAAX,CAAe,KAAK,SAAL,CAAe,CAAf,CAAf,EAAkC,OAAlC,CAA0C,KAAK,gBAAL,EAAuB,CAAC,GAAD,EAAM,SAAN,KAAoB;AACjF,uBAAW,IAAX,CAAgB,SAAhB,EADiF;SAApB,CAAjE;;;AAzC8D,cA8CxD,aAAa,UAAU,sBAAuB,UAAvB,CAAV,GACb,oBAAgB,oBAAoB,CAApB,CAAhB,EAAwC,oBAAoB,CAApB,CAAxC,EAAgE,SAAhE,EAA2E,UAA3E,CADa,CA9C2C;;AAiD9D,mBAAW,OAAX,CAAmB,CAAC,SAAD,EAAY,IAAZ,KAAqB;AACpC,kBAAM,YAAY,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,EAA0B,IAA1B,CAAZ,CAD8B;AAEpC,gBAAI,aAAa,KAAb,CAFgC;AAGpC,gBAAI,cAAc,KAAd,CAHgC;AAIpC,gBAAI,eAAJ,CAJoC;;AAMpC,gBAAI,CAAC,OAAD,KAAa,aAAa,UAAU,QAAV,CAAmB,IAAnB,CAAb,CAAb,EAAqD;AACrD,kCAAkB,UAAU,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAAD,CAArC,CADqD;aAAzD,MAEO,IAAI,CAAC,OAAD,KAAa,cAAc,UAAU,QAAV,CAAmB,KAAnB,CAAd,CAAb,EAAuD;AAC9D,kCAAkB,UAAU,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAAD,CAAnB,GAAyB,UAAU,KAAV,CAAgB,CAAC,CAAD,CAAzC,CAD4C;aAA3D,MAEA;AACH,kCAAkB,SAAlB,CADG;aAFA;;AAMP,8BAAkB,gBACb,OADa,CACL,KADK,EACE,KADF,EAEb,OAFa,CAEL,KAFK,EAEE,KAFF,EAGb,OAHa,CAGL,KAHK,EAGE,MAHF,EAIb,OAJa,CAIL,KAJK,EAIE,GAJF,EAKb,OALa,CAKL,IALK,EAKC,GALD,EAMb,OANa,CAML,KANK,EAME,KANF,CAAlB,CAdoC;;AAsBpC,gBAAI,UAAJ,EAAgB;AACZ,kCAAkB,CAAC,GAAE,eAAH,EAAmB,eAAnB,CAAlB,CADY;aAAhB,MAEO,IAAI,WAAJ,EAAiB;;AAEpB,kCAAkB,CAAC,GAAE,gBAAgB,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAAD,CAA5B,EAAgC,YAAhC,GAA8C,gBAAgB,KAAhB,CAAsB,CAAC,CAAD,CAApE,EAAwE,CAA1F,CAFoB;aAAjB;;AAKP,kBAAM,kBAAkB,CAAC,MAAM;AAC3B,oBAAI,WAAW,aAAa,IAAb,EAAmB;AAC9B,2BAAO,EAAP,CAD8B;iBAAlC;;AAIA,oBAAI,aAAa,MAAb,EAAqB;AACrB,2BAAO,gBAAP,CADqB;iBAAzB;;AAIA,uBAAO,CAAC,IAAD,GAAO,SAAP,EAAiB,CAAjB,CAAP,CAT2B;aAAN,CAAD,EAAlB,CA7B8B;;AAyCpC,kBAAM,iBAAiB,gBAAgB,OAAhB,CAAwB,KAAK,gBAAL,EAAuB,CAAC,GAAD,EAAM,SAAN,KAAoB;AACtF,oBAAI,yBAAyB,sBAAsB,SAAtB,CAAzB,EAA2D;AAC3D,wBAAI,cAAc,sBAAsB,SAAtB,CAAd,CADuD;AAE3D,wBAAI,OAAO,WAAP,KAAuB,QAAvB,EAAiC;AACjC,4BAAI,YAAY,KAAZ,CAAkB,KAAK,gCAAL,CAAtB,EAA8D;AAC1D,0CAAc,YAAY,KAAZ,CAAkB,GAAlB,EAAuB,GAAvB,CAA2B,SAA3B,EAAsC,IAAtC,CAA2C,GAA3C,CAAd,CAD0D;yBAA9D;qBADJ,MAIO,IAAI,uBAAuB,MAAvB,EAA+B;AACtC,sCAAc,YAAY,MAAZ,CADwB;qBAAnC,MAEA;AACH,sCAAc,YAAY,IAAZ,CAAd,CADG;qBAFA;;AAMP,2BAAO,eAAe,IAAf,GAAsB,UAAtB,GAAmC,CAAC,CAAD,GAAI,YAAY,OAAZ,CAAoB,GAApB,EAAyB,KAAzB,CAAJ,EAAoC,CAApC,CAAnC,CAZoD;iBAA/D;;AAeA,oBAAI,cAAc,IAAd,EAAoB;AACpB,2BAAO,UAAP,CADoB;iBAAxB;;AAIA,uBAAO,YAAP,CApBsF;aAApB,CAAhE,CAzC8B;;AAgEpC,gBAAI,CAAC,OAAD,IAAY,UAAZ,EAAwB;AACxB,4BAAY,UAAU,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAAD,CAA/B,CADwB;aAA5B,MAEO,IAAI,CAAC,OAAD,IAAY,WAAZ,EAAyB;AAChC,4BAAY,UAAU,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAAD,CAAnB,GAAyB,UAAU,KAAV,CAAgB,CAAC,CAAD,CAAzC,CADoB;aAA7B;;AAIP,kBAAM,iCAAiC,KAAK,8BAAL,CAtEH;AAuEpC,kBAAM,QAAQ,UAAU,MAAV,KAAqB,CAArB,GAAyB,IAAzB,GAAiC;;;qEAAS,UAAT,CAAoB,aAApB,EAAmC;AAC9E,sBAAM,QAAQ,EAAR,CADwE;AAE9E,oBAAI,QAAQ,CAAR,CAF0E;AAG9E,8BAAc,OAAd,CAAsB,8BAAtB,EAAsD,CAAC,KAAD,EAAQ,SAAR,EAAmB,aAAnB,EAAkC,MAAlC,KAA6C;AAC/F,wBAAI,SAAS,KAAT,EAAgB;AAChB,8BAAM,IAAN,CAAW,qCAA2B,UAAU,SAAV,CAAoB,KAApB,EAA2B,MAA3B,CAA3B,CAAX,EADgB;qBAApB;;AAIA,4BAAQ,SAAS,MAAM,MAAN,CAL8E;;AAO/F,wBAAI,aAAJ,EAAmB;AACf,8BAAM,qBAAqB,WAAW,aAAX,CAArB,CADS;AAEf,8BAAM,IAAN,CAAW,4CAAkC,kBAAlC,CAAX,EAFe;qBAAnB,MAGO;AACH,8BAAM,IAAN,CAAW,yCAA+B,SAA/B,EAA0C,SAA1C,CAAX,EADG;qBAHP;;AAOA,2BAAO,KAAP,CAd+F;iBAA7C,CAAtD,CAH8E;;AAoB9E,oBAAI,QAAQ,cAAc,MAAd,EAAsB;AAC9B,0BAAM,IAAN,CAAW,qCAA2B,UAAU,SAAV,CAAoB,KAApB,CAA3B,CAAX,EAD8B;iBAAlC;;AAIA,oBAAI,MAAM,MAAN,KAAiB,CAAjB,EAAoB;AACpB,0BAAM,IAAI,KAAJ,CAAU,aAAV,CAAN,CADoB;iBAAxB;;AAIA,uBAAO,oCAA0B,KAA1B,CAAP,CA5B8E;aAAnC,CA6B7C,SA7B6C,CAAjC,CAvEsB;;AAsGpC,gBAAI,iBAAJ,CAtGoC;AAuGpC,gBAAI,UAAU,IAAV,EAAgB;AAChB,sBAAM,cAAc,OAAO,MAAP,CAAc,GAAd,CAAkB,IAAlB,EAAwB,YAAxB,CAAqC,KAArC,CADJ;AAEhB,sBAAM,cAAc,UAAU,IAAV,GAAiB,WAAjB,GAA+B,oCAA0B,CAAC,WAAD,EAAc,KAAd,CAA1B,CAA/B,CAFJ;AAGhB,oCAAoB,2BAAiB,WAAjB,EAA8B,SAA9B,CAApB,CAHgB;aAApB,MAIO;AACH,oCAAoB,2BAAiB,KAAjB,EAAwB,SAAxB,CAApB,CADG;aAJP;;AAQA,uBAAW,GAAX,CAAe,IAAf,EAAqB,mBACjB,IAAI,MAAJ,CAAW,CAAC,CAAD,GAAI,cAAJ,EAAmB,GAAE,eAArB,EAAqC,GAAE,UAAU,OAAV,GAAoB,GAApB,EAAwB,CAA1E,CADiB,EAEjB,iBAFiB,CAArB,EA/GoC;SAArB,CAAnB,CAjD8D;;AAsK9D,eAAO,UAAP,CAtK8D;KADlE;;;;;AAlG+B,oBA+Q/B,GAAmB;AACf,aAAK,UAAL,CAAgB,gBAAhB,EAAkC,EAAE,WAAW,MAAX,EAApC,EAAyD,WAAa;AAClE,oBACK,GADL,CACS,SADT,EACoB,cADpB,EACoC,YADpC,EACkD,EAAE,WAAW,MAAX,EADpD,EAEK,YAFL,CAEkB,eAFlB,EAEmC,YAFnC,EAEiD,EAAE,WAAW,MAAX,EAFnD,EADkE;SAAb,CAAzD,CADe;;AAOf,eAAO,IAAP,CAPe;KAAnB;CA/QW;kBAAM","file":"RouterBuilder.js","sourcesContent":["import object2map from 'object2map';\nimport Router from './Router';\n// import RouterRouteCommon from './RouterRoute/Common';\nimport RouterRoute from './RouterRoute/Route';\nimport RouterRouteSegment from './RouterRoute/Segment';\nimport RouterRouteLang from './RouterRoute/Lang';\nimport UrlGenerator from './UrlGenerator/UrlGenerator';\nimport UrlGeneratorNamedParamPart from './UrlGenerator/UrlGeneratorNamedParamPart';\nimport UrlGeneratorOptionalGroupPart from './UrlGenerator/UrlGeneratorOptionalGroupPart';\nimport UrlGeneratorPartArray from './UrlGenerator/UrlGeneratorPartArray';\nimport UrlGeneratorStringPart from './UrlGenerator/UrlGeneratorStringPart';\n\n// const regExpStartingSlash = /^\\/+/;\n// const regExpEndingSlash = /\\/+$/;\n\n/**\n * Build a route segment\n */\nclass RouterBuilderSegment {\n    /**\n     * @param {RouterBuilder} builder\n     * @param {RouterRouteSegment} route\n     * @param {RouterRouteSegment} [parent]\n     */\n    constructor(builder, route, parent) {\n        this.builder = builder;\n        this.route = route;\n        this.parent = parent;\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {string} routeUrl\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} options.namedParamsDefinition\n     * @param {Map} options.routeLangs\n     * @param {string} options.extension\n     */\n    add(routeKey, routeUrl, controllerAndActionSeparatedByDot, options) {\n        const route = this._createRoute(routeKey, routeUrl, controllerAndActionSeparatedByDot, options);\n        this.route.subRoutes.push(route);\n        this.builder.router._addInternalRoute(routeKey, route);\n        return this;\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {string} routeUrl\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} options.namedParamsDefinition\n     * @param {Map} options.routeLangs\n     * @param {string} options.extension\n     */\n    _createRoute(routeKey, routeUrl, controllerAndActionSeparatedByDot, options) {\n        return this.builder._createRoute(false, this.route, routeUrl,\n                            controllerAndActionSeparatedByDot,\n                            options && options.namedParamsDefinition,\n                            options && options.routeLangs,\n                            options && options.extension);\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} options.namedParamsDefinition\n     * @param {Map} options.routeLangs\n     * @param {string} options.extension\n     */\n    defaultRoute(routeKey, controllerAndActionSeparatedByDot, options) {\n        const route = this._createRoute(routeKey, '', controllerAndActionSeparatedByDot, options);\n        // this.route.defaultRoute = route;\n        // this.builder.router._addInternalRoute(routeKey, route);\n        this.route.subRoutes.push(route);\n        this.builder.router._addInternalRoute(routeKey, route);\n        return this;\n    }\n\n    /**\n     * @param {string} routeUrl\n     * @param {Map} [options.namedParamsDefinition]\n     * @param {Map} [options.routeLangs]\n     * @param {Function} buildSegment\n     */\n    addSegment(routeUrl, options, buildSegment) {\n        if (typeof options === 'function') {\n            buildSegment = options;\n            options = {};\n        }\n\n        const route = this.builder._createRouteSegment(this.route, routeUrl,\n                            options.namedParamsDefinition, options.routeLangs);\n        const segment = new RouterBuilderSegment(this.buider, route, this.route);\n        buildSegment(segment);\n        this.router.addRoute(null, route);\n    }\n}\n\nexport default class RouterBuilder {\n    /**\n     * @param {RoutesTranslations} routesTranslations\n     * @param {Array} allLangs Array of all langs\n     */\n    constructor(routesTranslations, allLangs) {\n        this._routesTranslations = routesTranslations;\n        this._allLangs = allLangs;\n        this.router = new Router(routesTranslations);\n\n        this.regExpNamedParam = /\\$\\{([a-zA-Z]+)}/g;\n        this.translatableRoutePart = /\\/([a-zA-Z_]+)/g;\n        this.translatableRouteNamedParamValue = /^[a-zA-Z\\|_]+$/g;\n        this.regExpNamedParamOrOptionalPart = /(?:\\$\\{([a-zA-Z]+)})|(?:\\[([^\\]]+)\\])/g;\n    }\n\n    /**\n     * @param {string} lang\n     * @param {string} string\n     * @return {string}\n     */\n    translate(lang, string) {\n        const lstring = string.toLowerCase();\n        const translation = this._routesTranslations.translate(lstring, lang);\n        return translation;\n    }\n\n    /**\n     * @param {Map} routes\n     */\n    fromMap(routes) {\n        routes.forEach((route, routeKey) => {\n            this.add(routeKey, routeKey, route[0], {\n                namedParamsDefinition: route.length > 1 ? route[1] : undefined,\n                routeLangs: route.length > 2 ? (route[2] || {}) : {},\n                extension: route.length > 3 ? route[3] : undefined,\n            });\n        });\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {string} routeUrl\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} options.namedParamsDefinition\n     * @param {Map} options.routeLangs\n     * @param {string} options.extension\n     */\n    add(routeKey, routeUrl, controllerAndActionSeparatedByDot, options) {\n        const route = this._createRoute(false, undefined, routeUrl, controllerAndActionSeparatedByDot,\n                            options && options.namedParamsDefinition,\n                            options && options.routeLangs,\n                            options && options.extension);\n        this.router.addRoute(routeKey, route);\n        return this;\n    }\n\n    /**\n     * @param {string} routeUrl\n     * @param {Map} [options.namedParamsDefinition]\n     * @param {Map} [options.routeLangs]\n     * @param {Function} buildSegment\n     */\n    addSegment(routeUrl, options, buildSegment) {\n        if (typeof options === 'function') {\n            buildSegment = options;\n            options = {};\n        }\n\n        const route = this._createRouteSegment(undefined, routeUrl,\n                            options.namedParamsDefinition, options.routeLangs);\n        const segment = new RouterBuilderSegment(this, route, undefined);\n        buildSegment(segment);\n        this.router.addRoute(undefined, route);\n        return this;\n    }\n\n    /**\n     * @param {RouterRouteSegment} parent\n     * @param {string} routeUrl\n     * @param {Map} namedParamsDefinition\n     * @param {Map} routeLangs\n     * @return {RouterRouteCommon}\n     */\n    _createRouteSegment(parent, routeUrl, namedParamsDefinition, routeLangs) {\n        return this._createRoute(true, parent, routeUrl, undefined, namedParamsDefinition, routeLangs, undefined);\n    }\n\n    /**\n     * @param {boolean} segment\n     * @param {RouterRouteSegment} parent\n     * @param {string} routeUrl\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} namedParamsDefinition\n     * @param {Map} routeLangs\n     * @param {string} extension\n     * @return {RouterRouteCommon}\n     */\n    _createRoute(segment, parent, routeUrl, controllerAndActionSeparatedByDot,\n                        namedParamsDefinition, routeLangs, extension) {\n        let controllerAndAction;\n        if (!segment) {\n            controllerAndAction = controllerAndActionSeparatedByDot.split('.');\n            // assert(controllerAndAction.length == 2);\n        }\n\n        if (routeLangs == null) {\n            routeLangs = new Map();\n        } else {\n            routeLangs = object2map(routeLangs);\n        }\n\n        // -- Route langs --\n\n        if (routeLangs.size !== 0) {\n            this._allLangs.forEach((lang) => {\n                if (!routeLangs.has(lang)) {\n                    if (lang == 'en') {\n                        routeLangs.set('en', routeUrl);\n                    } else {\n                        throw new Error(`Missing lang ${lang}\" for route \"${routeUrl}\"`);\n                    }\n                }\n            });\n        } else if (!routeUrl.match(this.translatableRoutePart)) {\n            this._allLangs.forEach((lang) => {\n                routeLangs.set(lang, routeUrl);\n            });\n        } else {\n            this._allLangs.forEach(lang => {\n                routeLangs.set(\n                    lang,\n                    routeUrl.replace(\n                        this.translatableRoutePart,\n                        (str, p1) => `/${this.translate(lang, p1)}`)\n                );\n            });\n        }\n\n        const paramNames = [];\n        routeLangs.get(this._allLangs[0]).replace(this.regExpNamedParam, (str, paramName) => {\n            paramNames.push(paramName);\n        });\n        // console.log(routeLangs[this._allLangs[0]], paramNames);\n\n        const finalRoute = segment ? new RouterRouteSegment(paramNames)\n            : new RouterRoute(controllerAndAction[0], controllerAndAction[1], extension, paramNames);\n\n        routeLangs.forEach((routeLang, lang) => {\n            const translate = this.translate.bind(this, lang);\n            let specialEnd = false;\n            let specialEnd2 = false;\n            let routeLangRegExp;\n\n            if (!segment && (specialEnd = routeLang.endsWith('/*'))) {\n                routeLangRegExp = routeLang.slice(0, -2);\n            } else if (!segment && (specialEnd2 = routeLang.endsWith('/*]'))) {\n                routeLangRegExp = routeLang.slice(0, -3) + routeLang.slice(-1);\n            } else {\n                routeLangRegExp = routeLang;\n            }\n\n            routeLangRegExp = routeLangRegExp\n                .replace(/\\//g, '\\\\/')\n                .replace(/\\-/g, '\\\\-')\n                .replace(/\\*/g, '(.*)')\n                .replace(/\\[/g, '(')\n                .replace(/]/g, ')')\n                .replace(/\\(/g, '(?:');\n\n            if (specialEnd) {\n                routeLangRegExp = `${routeLangRegExp}(?:\\\\/([^.]*))?`;\n            } else if (specialEnd2) {\n                // ends now is : /*)?\n                routeLangRegExp = `${routeLangRegExp.slice(0, -2)}(?:\\\\/(.*))?${routeLangRegExp.slice(-2)}`;\n            }\n\n            const extensionRegExp = (() => {\n                if (segment || extension == null) {\n                    return '';\n                }\n\n                if (extension == 'html') {\n                    return '(?:\\\\.(html))?';\n                }\n\n                return `\\\\.(${extension})`;\n            })();\n\n            const replacedRegExp = routeLangRegExp.replace(this.regExpNamedParam, (str, paramName) => {\n                if (namedParamsDefinition && namedParamsDefinition[paramName]) {\n                    let paramDefVal = namedParamsDefinition[paramName];\n                    if (typeof paramDefVal === 'string') {\n                        if (paramDefVal.match(this.translatableRouteNamedParamValue)) {\n                            paramDefVal = paramDefVal.split('|').map(translate).join('|');\n                        }\n                    } else if (paramDefVal instanceof RegExp) {\n                        paramDefVal = paramDefVal.source;\n                    } else {\n                        paramDefVal = paramDefVal[lang];\n                    }\n\n                    return paramDefVal == 'id' ? '([0-9]+)' : `(${paramDefVal.replace('(', '(?:')})`;\n                }\n\n                if (paramName === 'id') {\n                    return '([0-9]+)';\n                }\n\n                return '([^\\\\/.]+)';\n            });\n\n            if (!segment && specialEnd) {\n                routeLang = routeLang.slice(0, -2);\n            } else if (!segment && specialEnd2) {\n                routeLang = routeLang.slice(0, -3) + routeLang.slice(-1);\n            }\n\n            const regExpNamedParamOrOptionalPart = this.regExpNamedParamOrOptionalPart;\n            const parts = routeLang.length === 0 ? null : (function buildParts(routeLangPart) {\n                const parts = [];\n                let index = 0;\n                routeLangPart.replace(regExpNamedParamOrOptionalPart, (match, paramName, optionalGroup, offset) => {\n                    if (offset > index) {\n                        parts.push(new UrlGeneratorStringPart(routeLang.substring(index, offset)));\n                    }\n\n                    index = offset + match.length;\n\n                    if (optionalGroup) {\n                        const optionalGroupParts = buildParts(optionalGroup);\n                        parts.push(new UrlGeneratorOptionalGroupPart(optionalGroupParts));\n                    } else {\n                        parts.push(new UrlGeneratorNamedParamPart(paramName, translate));\n                    }\n\n                    return match;\n                });\n\n                if (index < routeLangPart.length) {\n                    parts.push(new UrlGeneratorStringPart(routeLang.substring(index)));\n                }\n\n                if (parts.length === 0) {\n                    throw new Error(routeLangPart);\n                }\n\n                return new UrlGeneratorPartArray(parts);\n            }(routeLang));\n\n            let urlGeneratorParts;\n            if (parent != null) {\n                const parentParts = parent.routes.get(lang).urlGenerator.parts;\n                const mergedParts = parts === null ? parentParts : new UrlGeneratorPartArray([parentParts, parts]);\n                urlGeneratorParts = new UrlGenerator(mergedParts, extension);\n            } else {\n                urlGeneratorParts = new UrlGenerator(parts, extension);\n            }\n\n            finalRoute.set(lang, new RouterRouteLang(\n                new RegExp(`^${replacedRegExp}${extensionRegExp}${segment ? '(.*)$' : '$'}`),\n                urlGeneratorParts\n            ));\n        });\n\n        return finalRoute;\n    }\n\n    /**\n     * Add default routes\n     */\n    addDefaultRoutes() {\n        this.addSegment('/${controller}', { extension: 'html' }, (segment) => {\n            segment\n                .add('default', '/${action}/*', 'site.index', { extension: 'html' })\n                .defaultRoute('defaultSimple', 'site.index', { extension: 'html' });\n        });\n\n        return this;\n    }\n}\n"]}