{"version":3,"sources":["../../src/RouterBuilder/RouterBuilder.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;IAMqB,a,GAAN,MAAM,aAAN,CAAoB;;;;;AAK/B,gBAAY,kBAAZ,EAAgC,QAAhC,EAA0C;AACtC,aAAK,mBAAL,GAA2B,kBAA3B;AACA,aAAK,SAAL,GAAiB,QAAjB;AACA,aAAK,MAAL,GAAc,qBAAW,kBAAX,CAAd;;AAEA,aAAK,gBAAL,GAAwB,mBAAxB;AACA,aAAK,qBAAL,GAA6B,iBAA7B;AACA,aAAK,gCAAL,GAAwC,iBAAxC;AACA,aAAK,8BAAL,GAAsC,wCAAtC;AACH;;;;;;;AAOD,cAAU,IAAV,EAAgB,MAAhB,EAAwB;AACpB,cAAM,UAAU,OAAO,WAAP,EAAhB;AACA,cAAM,cAAc,KAAK,mBAAL,CAAyB,SAAzB,CAAmC,OAAnC,EAA4C,IAA5C,CAApB;AACA,eAAO,WAAP;AACH;;;;;AAKD,YAAQ,MAAR,EAAgB;AACZ,eAAO,OAAP,CAAe,CAAC,KAAD,EAAQ,QAAR,KAAqB;AAChC,iBAAK,GAAL,CAAS,QAAT,EAAmB,QAAnB,EAA6B,MAAM,CAAN,CAA7B,EAAuC;AACnC,uCAAuB,MAAM,MAAN,GAAe,CAAf,GAAmB,MAAM,CAAN,CAAnB,GAA8B,SADlB;AAEnC,4BAAY,MAAM,MAAN,GAAe,CAAf,GAAoB,MAAM,CAAN,KAAY,EAAhC,GAAsC,EAFf;AAGnC,2BAAW,MAAM,MAAN,GAAe,CAAf,GAAmB,MAAM,CAAN,CAAnB,GAA8B;AAHN,aAAvC;AAKH,SAND;AAOH;;;;;;;;;;;AAUD,QAAI,QAAJ,EAAc,QAAd,EAAwB,iCAAxB,EAA2D,OAA3D,EAAoE;AAChE,cAAM,QAAQ,KAAK,YAAL,CACV,KADU,EAEV,SAFU,EAGV,QAHU,EAIV,iCAJU,EAKV,WAAW,QAAQ,qBALT,EAMV,WAAW,QAAQ,UANT,EAOV,WAAW,QAAQ,SAPT,CAAd;AASA,aAAK,MAAL,CAAY,QAAZ,CAAqB,QAArB,EAA+B,KAA/B;AACA,eAAO,IAAP;AACH;;;;;;;;;AAQD,eAAW,QAAX,EAAqB,OAArB,EAA8B,YAA9B,EAA4C;AACxC,YAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AAC/B,2BAAe,OAAf;AACA,sBAAU,EAAV;AACH;;AAED,cAAM,QAAQ,KAAK,mBAAL,CAAyB,SAAzB,EAAoC,QAApC,EACM,QAAQ,qBADd,EACqC,QAAQ,UAD7C,CAAd;AAEA,cAAM,UAAU,mCAAyB,IAAzB,EAA+B,KAA/B,EAAsC,SAAtC,CAAhB;AACA,qBAAa,OAAb;AACA,aAAK,MAAL,CAAY,QAAZ,CAAqB,SAArB,EAAgC,KAAhC;AACA,eAAO,IAAP;AACH;;;;;;;;;AASD,wBAAoB,MAApB,EAA4B,QAA5B,EAAsC,qBAAtC,EAA6D,UAA7D,EAAyE;AACrE,eAAO,KAAK,YAAL,CACH,IADG,EAEH,MAFG,EAGH,QAHG,EAIH,SAJG,EAKH,qBALG,EAMH,UANG,EAOH,SAPG,CAAP;AASH;;;;;;;;;;;;AAYD,iBAAa,OAAb,EAAsB,MAAtB,EAA8B,QAA9B,EAAwC,iCAAxC,EACoB,qBADpB,EAC2C,UAD3C,EACuD,SADvD,EACkE;AAC9D,YAAI,mBAAJ;AACA,YAAI,CAAC,OAAL,EAAc;AACV,kCAAsB,kCAAkC,KAAlC,CAAwC,GAAxC,CAAtB;;AAEH;;AAED,YAAI,cAAc,IAAlB,EAAwB;AACpB,yBAAa,IAAI,GAAJ,EAAb;AACH,SAFD,MAEO;AACH,yBAAa,0BAAW,UAAX,CAAb;AACH;;;;AAID,YAAI,WAAW,IAAX,KAAoB,CAAxB,EAA2B;AACvB,iBAAK,SAAL,CAAe,OAAf,CAAwB,IAAD,IAAU;AAC7B,oBAAI,CAAC,WAAW,GAAX,CAAe,IAAf,CAAL,EAA2B;AACvB,wBAAI,QAAQ,IAAZ,EAAkB;AACd,mCAAW,GAAX,CAAe,IAAf,EAAqB,QAArB;AACH,qBAFD,MAEO;AACH,8BAAM,IAAI,KAAJ,CAAU,CAAC,aAAD,GAAgB,IAAhB,EAAqB,aAArB,GAAoC,QAApC,EAA6C,CAA7C,CAAV,CAAN;AACH;AACJ;AACJ,aARD;AASH,SAVD,MAUO,IAAI,CAAC,SAAS,KAAT,CAAe,KAAK,qBAApB,CAAL,EAAiD;AACpD,iBAAK,SAAL,CAAe,OAAf,CAAwB,IAAD,IAAU;AAC7B,2BAAW,GAAX,CAAe,IAAf,EAAqB,QAArB;AACH,aAFD;AAGH,SAJM,MAIA;AACH,iBAAK,SAAL,CAAe,OAAf,CAAuB,QAAQ;AAC3B,2BAAW,GAAX,CACI,IADJ,EAEI,SAAS,OAAT,CACI,KAAK,qBADT,EAEI,CAAC,GAAD,EAAM,EAAN,KAAa,CAAC,CAAD,GAAI,KAAK,SAAL,CAAe,IAAf,EAAqB,EAArB,CAAJ,EAA6B,AAA7B,CAFjB,CAFJ;AAMH,aAPD;AAQH;;AAED,cAAM,aAAa,EAAnB;AACA,mBAAW,GAAX,CAAe,KAAK,SAAL,CAAe,CAAf,CAAf,EAAkC,OAAlC,CAA0C,KAAK,gBAA/C,EAAiE,CAAC,GAAD,EAAM,SAAN,KAAoB;AACjF,uBAAW,IAAX,CAAgB,SAAhB;AACH,SAFD;;AAIA,cAAM,aAAa,UAAU,sBAAuB,UAAvB,CAAV,GACb,oBAAgB,oBAAoB,CAApB,CAAhB,EAAwC,oBAAoB,CAApB,CAAxC,EAAgE,SAAhE,EAA2E,UAA3E,CADN;;AAGA,mBAAW,OAAX,CAAmB,CAAC,SAAD,EAAY,IAAZ,KAAqB;AACpC,kBAAM,YAAY,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,EAA0B,IAA1B,CAAlB;AACA,gBAAI,aAAa,KAAjB;AACA,gBAAI,cAAc,KAAlB;AACA,gBAAI,eAAJ;;AAEA,gBAAI,CAAC,OAAD,KAAa,aAAa,UAAU,QAAV,CAAmB,IAAnB,CAA1B,CAAJ,EAAyD;AACrD,kCAAkB,UAAU,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAlB;AACH,aAFD,MAEO,IAAI,CAAC,OAAD,KAAa,cAAc,UAAU,QAAV,CAAmB,KAAnB,CAA3B,CAAJ,EAA2D;AAC9D,kCAAkB,UAAU,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,IAAyB,UAAU,KAAV,CAAgB,CAAC,CAAjB,CAA3C;AACH,aAFM,MAEA;AACH,kCAAkB,SAAlB;AACH;;AAED,8BAAkB,gBACb,OADa,CACL,KADK,EACE,KADF,EAEb,OAFa,CAEL,KAFK,EAEE,KAFF,EAGb,OAHa,CAGL,KAHK,EAGE,MAHF,EAIb,OAJa,CAIL,KAJK,EAIE,GAJF,EAKb,OALa,CAKL,IALK,EAKC,IALD,EAMb,OANa,CAML,KANK,EAME,KANF,CAAlB;;AAQA,gBAAI,UAAJ,EAAgB;AACZ,kCAAkB,CAAC,AAAD,GAAG,eAAH,EAAmB,eAAnB,CAAlB;AACH,aAFD,MAEO,IAAI,WAAJ,EAAiB;;AAEpB,kCAAkB,CAAC,AAAD,GAAG,gBAAgB,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,CAAH,EAAgC,YAAhC,GAA8C,gBAAgB,KAAhB,CAAsB,CAAC,CAAvB,CAA9C,EAAwE,AAAxE,CAAlB;AACH;;AAED,kBAAM,kBAAkB,CAAC,MAAM;AAC3B,oBAAI,WAAW,aAAa,IAA5B,EAAkC;AAC9B,2BAAO,EAAP;AACH;;AAED,oBAAI,aAAa,MAAjB,EAAyB;AACrB,2BAAO,gBAAP;AACH;;AAED,uBAAO,CAAC,IAAD,GAAO,SAAP,EAAiB,CAAjB,CAAP;AACH,aAVuB,GAAxB;;AAYA,kBAAM,iBAAiB,gBAAgB,OAAhB,CAAwB,KAAK,gBAA7B,EAA+C,CAAC,GAAD,EAAM,SAAN,KAAoB;AACtF,oBAAI,yBAAyB,sBAAsB,SAAtB,CAA7B,EAA+D;AAC3D,wBAAI,cAAc,sBAAsB,SAAtB,CAAlB;AACA,wBAAI,OAAO,WAAP,KAAuB,QAA3B,EAAqC;AACjC,4BAAI,YAAY,KAAZ,CAAkB,KAAK,gCAAvB,CAAJ,EAA8D;AAC1D,0CAAc,YAAY,KAAZ,CAAkB,GAAlB,EAAuB,GAAvB,CAA2B,SAA3B,EAAsC,IAAtC,CAA2C,GAA3C,CAAd;AACH;AACJ,qBAJD,MAIO,IAAI,uBAAuB,MAA3B,EAAmC;AACtC,sCAAc,YAAY,MAA1B;AACH,qBAFM,MAEA;AACH,sCAAc,YAAY,IAAZ,CAAd;AACH;;AAED,2BAAO,eAAe,IAAf,GAAsB,UAAtB,GAAmC,CAAC,CAAD,GAAI,YAAY,OAAZ,CAAoB,GAApB,EAAyB,KAAzB,CAAJ,EAAoC,CAApC,CAA1C;AACH;;AAED,oBAAI,cAAc,IAAlB,EAAwB;AACpB,2BAAO,UAAP;AACH;;AAED,uBAAO,YAAP;AACH,aArBsB,CAAvB;;AAuBA,gBAAI,CAAC,OAAD,IAAY,UAAhB,EAA4B;AACxB,4BAAY,UAAU,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAZ;AACH,aAFD,MAEO,IAAI,CAAC,OAAD,IAAY,WAAhB,EAA6B;AAChC,4BAAY,UAAU,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,IAAyB,UAAU,KAAV,CAAgB,CAAC,CAAjB,CAArC;AACH;;AAED,kBAAM,iCAAiC,KAAK,8BAA5C;AACA,kBAAM,QAAQ,UAAU,MAAV,KAAqB,CAArB,GAAyB,IAAzB,G;;;4DAAiC,SAAS,UAAT,CAAoB,aAApB,EAAmC;AAC9E,sBAAM,QAAQ,EAAd;AACA,oBAAI,QAAQ,CAAZ;AACA,8BAAc,OAAd,CACI,8BADJ,EAEI,CAAC,KAAD,EAAQ,SAAR,EAAmB,aAAnB,EAAkC,MAAlC,KAA6C;AACzC,wBAAI,SAAS,KAAb,EAAoB;AAChB,8BAAM,IAAN,CAAW,qCAA2B,UAAU,SAAV,CAAoB,KAApB,EAA2B,MAA3B,CAA3B,CAAX;AACH;;AAED,4BAAQ,SAAS,MAAM,MAAvB;;AAEA,wBAAI,aAAJ,EAAmB;AACf,8BAAM,qBAAqB,WAAW,aAAX,CAA3B;AACA,8BAAM,IAAN,CAAW,4CAAkC,kBAAlC,CAAX;AACH,qBAHD,MAGO;AACH,8BAAM,IAAN,CAAW,yCAA+B,SAA/B,EAA0C,SAA1C,CAAX;AACH;;AAED,2BAAO,KAAP;AACH,iBAjBL;;AAoBA,oBAAI,QAAQ,cAAc,MAA1B,EAAkC;AAC9B,0BAAM,IAAN,CAAW,qCAA2B,UAAU,SAAV,CAAoB,KAApB,CAA3B,CAAX;AACH;;AAED,oBAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACpB,0BAAM,IAAI,KAAJ,CAAU,aAAV,CAAN;AACH;;AAED,uBAAO,oCAA0B,KAA1B,CAAP;AACH,aAhC8C,CAgC7C,SAhC6C,CAA/C;;AAkCA,gBAAI,iBAAJ;AACA,gBAAI,UAAU,IAAd,EAAoB;AAChB,sBAAM,cAAc,OAAO,MAAP,CAAc,GAAd,CAAkB,IAAlB,EAAwB,YAAxB,CAAqC,KAAzD;AACA,sBAAM,cAAc,UAAU,IAAV,GAAiB,WAAjB,GACd,oCAA0B,CAAC,WAAD,EAAc,KAAd,CAA1B,CADN;AAEA,oCAAoB,2BAAiB,WAAjB,EAA8B,SAA9B,CAApB;AACH,aALD,MAKO;AACH,oCAAoB,2BAAiB,KAAjB,EAAwB,SAAxB,CAApB;AACH;;AAED,uBAAW,GAAX,CAAe,IAAf,EAAqB,mBACjB,IAAI,MAAJ,CAAW,CAAC,CAAD,GAAI,cAAJ,EAAmB,AAAnB,GAAqB,eAArB,EAAqC,AAArC,GAAuC,UAAU,OAAV,GAAoB,GAA3D,EAA+D,AAA/D,CAAX,CADiB,EAEjB,iBAFiB,CAArB;AAIH,SAvHD;;AAyHA,eAAO,UAAP;AACH;;;;;AAKD,uBAAmB;AACf,aAAK,UAAL,CAAgB,gBAAhB,EAAkC,EAAE,WAAW,MAAb,EAAlC,EAA0D,OAAD,IAAa;AAClE,oBACK,GADL,CACS,SADT,EACoB,cADpB,EACoC,YADpC,EACkD,EAAE,WAAW,MAAb,EADlD,EAEK,YAFL,CAEkB,eAFlB,EAEmC,YAFnC,EAEiD,EAAE,WAAW,MAAb,EAFjD;AAGH,SAJD;;AAMA,eAAO,IAAP;AACH;AAvS8B,C;;;kBAAd,a","file":"RouterBuilder.js","sourcesContent":["import object2map from 'object2map';\nimport Router from '../Router';\n// import RouterRouteCommon from '../RouterRoute/Common';\nimport RouterRoute from '../RouterRoute/Route';\nimport RouterRouteSegment from '../RouterRoute/Segment';\nimport RouterRouteLang from '../RouterRoute/Lang';\nimport UrlGenerator from '../UrlGenerator/UrlGenerator';\nimport UrlGeneratorNamedParamPart from '../UrlGenerator/UrlGeneratorNamedParamPart';\nimport UrlGeneratorOptionalGroupPart from '../UrlGenerator/UrlGeneratorOptionalGroupPart';\nimport UrlGeneratorPartArray from '../UrlGenerator/UrlGeneratorPartArray';\nimport UrlGeneratorStringPart from '../UrlGenerator/UrlGeneratorStringPart';\nimport RouterBuilderSegment from './RouterBuilderSegment';\n\n// const regExpStartingSlash = /^\\/+/;\n// const regExpEndingSlash = /\\/+$/;\n\n\nexport default class RouterBuilder {\n    /**\n     * @param {RoutesTranslations} routesTranslations\n     * @param {Array} allLangs Array of all langs\n     */\n    constructor(routesTranslations, allLangs) {\n        this._routesTranslations = routesTranslations;\n        this._allLangs = allLangs;\n        this.router = new Router(routesTranslations);\n\n        this.regExpNamedParam = /\\$\\{([a-zA-Z]+)}/g;\n        this.translatableRoutePart = /\\/([a-zA-Z_]+)/g;\n        this.translatableRouteNamedParamValue = /^[a-zA-Z\\|_]+$/g;\n        this.regExpNamedParamOrOptionalPart = /(?:\\$\\{([a-zA-Z]+)})|(?:\\[([^\\]]+)\\])/g;\n    }\n\n    /**\n     * @param {string} lang\n     * @param {string} string\n     * @return {string}\n     */\n    translate(lang, string) {\n        const lstring = string.toLowerCase();\n        const translation = this._routesTranslations.translate(lstring, lang);\n        return translation;\n    }\n\n    /**\n     * @param {Map} routes\n     */\n    fromMap(routes) {\n        routes.forEach((route, routeKey) => {\n            this.add(routeKey, routeKey, route[0], {\n                namedParamsDefinition: route.length > 1 ? route[1] : undefined,\n                routeLangs: route.length > 2 ? (route[2] || {}) : {},\n                extension: route.length > 3 ? route[3] : undefined,\n            });\n        });\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {string} routeUrl\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} options.namedParamsDefinition\n     * @param {Map} options.routeLangs\n     * @param {string} options.extension\n     */\n    add(routeKey, routeUrl, controllerAndActionSeparatedByDot, options) {\n        const route = this._createRoute(\n            false,\n            undefined,\n            routeUrl,\n            controllerAndActionSeparatedByDot,\n            options && options.namedParamsDefinition,\n            options && options.routeLangs,\n            options && options.extension\n        );\n        this.router.addRoute(routeKey, route);\n        return this;\n    }\n\n    /**\n     * @param {string} routeUrl\n     * @param {Map} [options.namedParamsDefinition]\n     * @param {Map} [options.routeLangs]\n     * @param {Function} buildSegment\n     */\n    addSegment(routeUrl, options, buildSegment) {\n        if (typeof options === 'function') {\n            buildSegment = options;\n            options = {};\n        }\n\n        const route = this._createRouteSegment(undefined, routeUrl,\n                            options.namedParamsDefinition, options.routeLangs);\n        const segment = new RouterBuilderSegment(this, route, undefined);\n        buildSegment(segment);\n        this.router.addRoute(undefined, route);\n        return this;\n    }\n\n    /**\n     * @param {RouterRouteSegment} parent\n     * @param {string} routeUrl\n     * @param {Map} namedParamsDefinition\n     * @param {Map} routeLangs\n     * @return {RouterRouteCommon}\n     */\n    _createRouteSegment(parent, routeUrl, namedParamsDefinition, routeLangs) {\n        return this._createRoute(\n            true,\n            parent,\n            routeUrl,\n            undefined,\n            namedParamsDefinition,\n            routeLangs,\n            undefined\n        );\n    }\n\n    /**\n     * @param {boolean} segment\n     * @param {RouterRouteSegment} parent\n     * @param {string} routeUrl\n     * @param {string} controllerAndActionSeparatedByDot\n     * @param {Map} namedParamsDefinition\n     * @param {Map} routeLangs\n     * @param {string} extension\n     * @return {RouterRouteCommon}\n     */\n    _createRoute(segment, parent, routeUrl, controllerAndActionSeparatedByDot,\n                        namedParamsDefinition, routeLangs, extension) {\n        let controllerAndAction;\n        if (!segment) {\n            controllerAndAction = controllerAndActionSeparatedByDot.split('.');\n            // assert(controllerAndAction.length == 2);\n        }\n\n        if (routeLangs == null) {\n            routeLangs = new Map();\n        } else {\n            routeLangs = object2map(routeLangs);\n        }\n\n        // -- Route langs --\n\n        if (routeLangs.size !== 0) {\n            this._allLangs.forEach((lang) => {\n                if (!routeLangs.has(lang)) {\n                    if (lang == 'en') {\n                        routeLangs.set('en', routeUrl);\n                    } else {\n                        throw new Error(`Missing lang ${lang}\" for route \"${routeUrl}\"`);\n                    }\n                }\n            });\n        } else if (!routeUrl.match(this.translatableRoutePart)) {\n            this._allLangs.forEach((lang) => {\n                routeLangs.set(lang, routeUrl);\n            });\n        } else {\n            this._allLangs.forEach(lang => {\n                routeLangs.set(\n                    lang,\n                    routeUrl.replace(\n                        this.translatableRoutePart,\n                        (str, p1) => `/${this.translate(lang, p1)}`)\n                );\n            });\n        }\n\n        const paramNames = [];\n        routeLangs.get(this._allLangs[0]).replace(this.regExpNamedParam, (str, paramName) => {\n            paramNames.push(paramName);\n        });\n\n        const finalRoute = segment ? new RouterRouteSegment(paramNames)\n            : new RouterRoute(controllerAndAction[0], controllerAndAction[1], extension, paramNames);\n\n        routeLangs.forEach((routeLang, lang) => {\n            const translate = this.translate.bind(this, lang);\n            let specialEnd = false;\n            let specialEnd2 = false;\n            let routeLangRegExp;\n\n            if (!segment && (specialEnd = routeLang.endsWith('/*'))) {\n                routeLangRegExp = routeLang.slice(0, -2);\n            } else if (!segment && (specialEnd2 = routeLang.endsWith('/*]'))) {\n                routeLangRegExp = routeLang.slice(0, -3) + routeLang.slice(-1);\n            } else {\n                routeLangRegExp = routeLang;\n            }\n\n            routeLangRegExp = routeLangRegExp\n                .replace(/\\//g, '\\\\/')\n                .replace(/\\-/g, '\\\\-')\n                .replace(/\\*/g, '(.*)')\n                .replace(/\\[/g, '(')\n                .replace(/]/g, ')?')\n                .replace(/\\(/g, '(?:');\n\n            if (specialEnd) {\n                routeLangRegExp = `${routeLangRegExp}(?:\\\\/([^.]*))?`;\n            } else if (specialEnd2) {\n                // ends now is : /*)?\n                routeLangRegExp = `${routeLangRegExp.slice(0, -2)}(?:\\\\/(.*))?${routeLangRegExp.slice(-2)}`;\n            }\n\n            const extensionRegExp = (() => {\n                if (segment || extension == null) {\n                    return '';\n                }\n\n                if (extension == 'html') {\n                    return '(?:\\\\.(html))?';\n                }\n\n                return `\\\\.(${extension})`;\n            })();\n\n            const replacedRegExp = routeLangRegExp.replace(this.regExpNamedParam, (str, paramName) => {\n                if (namedParamsDefinition && namedParamsDefinition[paramName]) {\n                    let paramDefVal = namedParamsDefinition[paramName];\n                    if (typeof paramDefVal === 'string') {\n                        if (paramDefVal.match(this.translatableRouteNamedParamValue)) {\n                            paramDefVal = paramDefVal.split('|').map(translate).join('|');\n                        }\n                    } else if (paramDefVal instanceof RegExp) {\n                        paramDefVal = paramDefVal.source;\n                    } else {\n                        paramDefVal = paramDefVal[lang];\n                    }\n\n                    return paramDefVal == 'id' ? '([0-9]+)' : `(${paramDefVal.replace('(', '(?:')})`;\n                }\n\n                if (paramName === 'id') {\n                    return '([0-9]+)';\n                }\n\n                return '([^\\\\/.]+)';\n            });\n\n            if (!segment && specialEnd) {\n                routeLang = routeLang.slice(0, -2);\n            } else if (!segment && specialEnd2) {\n                routeLang = routeLang.slice(0, -3) + routeLang.slice(-1);\n            }\n\n            const regExpNamedParamOrOptionalPart = this.regExpNamedParamOrOptionalPart;\n            const parts = routeLang.length === 0 ? null : (function buildParts(routeLangPart) {\n                const parts = [];\n                let index = 0;\n                routeLangPart.replace(\n                    regExpNamedParamOrOptionalPart,\n                    (match, paramName, optionalGroup, offset) => {\n                        if (offset > index) {\n                            parts.push(new UrlGeneratorStringPart(routeLang.substring(index, offset)));\n                        }\n\n                        index = offset + match.length;\n\n                        if (optionalGroup) {\n                            const optionalGroupParts = buildParts(optionalGroup);\n                            parts.push(new UrlGeneratorOptionalGroupPart(optionalGroupParts));\n                        } else {\n                            parts.push(new UrlGeneratorNamedParamPart(paramName, translate));\n                        }\n\n                        return match;\n                    }\n                );\n\n                if (index < routeLangPart.length) {\n                    parts.push(new UrlGeneratorStringPart(routeLang.substring(index)));\n                }\n\n                if (parts.length === 0) {\n                    throw new Error(routeLangPart);\n                }\n\n                return new UrlGeneratorPartArray(parts);\n            }(routeLang));\n\n            let urlGeneratorParts;\n            if (parent != null) {\n                const parentParts = parent.routes.get(lang).urlGenerator.parts;\n                const mergedParts = parts === null ? parentParts\n                    : new UrlGeneratorPartArray([parentParts, parts]);\n                urlGeneratorParts = new UrlGenerator(mergedParts, extension);\n            } else {\n                urlGeneratorParts = new UrlGenerator(parts, extension);\n            }\n\n            finalRoute.set(lang, new RouterRouteLang(\n                new RegExp(`^${replacedRegExp}${extensionRegExp}${segment ? '(.*)$' : '$'}`),\n                urlGeneratorParts\n            ));\n        });\n\n        return finalRoute;\n    }\n\n    /**\n     * Add default routes\n     */\n    addDefaultRoutes() {\n        this.addSegment('/${controller}', { extension: 'html' }, (segment) => {\n            segment\n                .add('default', '/${action}/*', 'site.index', { extension: 'html' })\n                .defaultRoute('defaultSimple', 'site.index', { extension: 'html' });\n        });\n\n        return this;\n    }\n}\n"]}