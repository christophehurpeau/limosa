{"version":3,"sources":["../src/Router.js"],"names":[],"mappings":"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","file":"Router.js","sourcesContent":["import RouterRoute from './RouterRoute/Route';\nimport RouterRouteSegment from './RouterRoute/Segment';\nimport Route from './Route';\n\nconst regExpStartingSlash = /^\\/+/;\nconst regExpEndingSlash = /\\/+$/;\n\nexport default class Router {\n    /**\n     * @param {RoutesTranslations} routesTranslations\n     */\n    constructor(routesTranslations) {\n        this._routesMap = new Map();\n        this._routes = [];\n        this._routesTranslations = routesTranslations;\n    }\n\n    /**\n     * Get a Route by its key\n     *\n     * @param {String} key\n     * @return {Route}\n     */\n    get(key) {\n        return this._routesMap.get(key);\n    }\n\n    /**\n     * @param {String} routeKey\n     * @param {RouterRouteCommon} route\n     */\n    addRoute(routeKey, route) {\n        if (route instanceof RouterRoute) {\n            this._addInternalRoute(routeKey, route);\n        }\n\n        this._routes.push(route);\n    }\n\n    /**\n     * @param {String} routeKey\n     * @param {RouterRoute} route\n     */\n    _addInternalRoute(routeKey, route) {\n        this._routesMap.set(routeKey, route);\n    }\n\n    /**\n     * @param {String} path\n     * @param {String=} lang\n     * @return {Route}\n     */\n    find(path, lang = 'en') {\n        path = '/' + path.trim().replace(regExpStartingSlash, '').replace(regExpEndingSlash, '');\n        return this._findRoute(this._routes, path, path, lang);\n    }\n\n    /**\n     * @param {Array} routes\n     * @param {String} completePath\n     * @param {String} path\n     * @param {String} lang\n     * @param {Map} namedParams\n     * @return {RouterRoute} route the route or undefined if none found\n     */\n    _findRoute(routes, completePath, path, lang, namedParams) {\n        let result;\n        routes.some((route, index) => {\n            /* RouterRouteLang */\n            let routeLang = route.get(lang);\n            if (!routeLang) {\n                throw new Error('Cannot find routeLang for lang ' + lang + ' and route ' + index);\n            }\n\n            if (this.logger) {\n                this.logger.info('[springbokjs-router] trying ' + routeLang.regExp);\n            }\n\n            const match = routeLang.match(path);\n            if (!match) {\n                return false;\n            }\n            // console.log(match);\n\n            match.shift(); // remove m[0];\n            let groupCount = match.length;\n\n            if (route instanceof RouterRouteSegment) {\n                const restOfThePath = match[--groupCount];\n\n                // Copy/paste... argh I hate that !\n                if (route.getNamedParamsCount() !== 0) {\n                    // set params\n                    if (!namedParams) {\n                        namedParams = new Map();\n                    }\n\n                    let group = 0;\n                    route.namedParams.forEach((paramName) => {\n                        const value = match[group++];\n                        if (value) {\n                            namedParams.set(paramName, value);\n                        }\n                    });\n                }\n\n                /* if (route.defaultRoute) {\n                    if (restOfThePath.length !== 0) {\n                        result = this._findRoute(route.subRoutes, completePath, restOfThePath, lang, namedParams);\n                    }\n                    if (!result) {\n                        result = this._createRoute(completePath, lang, route.defaultRoute, undefined, 0, namedParams);\n                    }\n                } else {*/\n                result = this._findRoute(route.subRoutes, completePath, restOfThePath, lang, namedParams);\n                // }\n            } else {\n                result = this._createRoute(completePath, lang, route, match, groupCount, namedParams);\n            }\n\n            return true;\n        });\n        return result;\n    }\n\n    /**\n     * Creates a new Route result\n     *\n     * @param {String} completePath\n     * @param {String} lang\n     * @param {RouterRoute} route\n     * @param {Array} match\n     * @param {int} groupCount\n     * @param {Map} namedParams\n     * @return {Route} route\n     */\n    _createRoute(completePath, lang, route, match, groupCount, namedParams) {\n        let group = 0;\n        let extension = groupCount === 0 || !route.extension ? undefined : match[--groupCount];\n\n        let controller = route.controller;\n        let action = route.action;\n\n        let otherParams;\n\n        if (route.getNamedParamsCount() !== 0) {\n            // set params\n            if (!namedParams) {\n                namedParams = new Map();\n            }\n\n            route.namedParams.forEach((paramName) => {\n                const value = match[group++];\n                if (value) {\n                    namedParams.set(paramName, value);\n                }\n            });\n\n            if (!namedParams.size) {\n                namedParams = undefined;\n            }\n        }\n\n        if (namedParams) {\n            // Replace controller and action if needed\n            if (namedParams.has('controller')) {\n                controller = this._routesTranslations.untranslate(namedParams.get('controller'), lang);\n                // Should we remove it ?\n                namedParams.delete('controller');\n            }\n\n            if (namedParams.has('action')) {\n                action = this._routesTranslations.untranslate(namedParams.get('action'), lang);\n                // Should we remove it ?\n                namedParams.delete('action');\n            }\n\n            if (!namedParams.size) {\n                namedParams = undefined;\n            }\n        }\n\n        // The only not-named param can be /*\n        if (group + 1 === groupCount && match[group]) {\n            otherParams = match[group].split('/');\n        }\n\n        return new Route(completePath, controller, action, namedParams, otherParams, extension);\n    }\n\n    /**\n     * Create a link\n     *\n     * @param {String} lang\n     * @param {String} routeKey\n     * @param {Object} [params]\n     * @param {String} [params.extension]\n     * @param {String} [params.queryString]\n     * @param {String} [params.hash]\n     * @return {String}\n     */\n    urlGenerator(lang, routeKey, params) {\n        const route = this._routesMap[routeKey];\n        return route.routes[lang].url(params);\n    }\n}\n"]}