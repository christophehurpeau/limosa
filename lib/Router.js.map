{"version":3,"sources":["../src/Router.js"],"names":[],"mappings":"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","file":"Router.js","sourcesContent":["import RouterRoute from './RouterRoute/Route';\nimport RouterRouteSegment from './RouterRoute/Segment';\nimport Route from './Route';\n\nconst regExpStartingSlash = /^\\/+/;\nconst regExpEndingSlash = /\\/+$/;\n\nexport default class Router {\n    /**\n     * @param {RoutesTranslations} routesTranslations\n     */\n    constructor(routesTranslations) {\n        this._routesMap = new Map();\n        this._routes = [];\n        this._routesTranslations = routesTranslations;\n    }\n\n    /**\n     * Get a Route by its key\n     *\n     * @param {string} key\n     * @return {Route}\n     */\n    get(key) {\n        return this._routesMap.get(key);\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {RouterRouteCommon} route\n     */\n    addRoute(routeKey, route) {\n        if (route instanceof RouterRoute) {\n            this._addInternalRoute(routeKey, route);\n        }\n\n        this._routes.push(route);\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {RouterRoute} route\n     */\n    _addInternalRoute(routeKey, route) {\n        this._routesMap.set(routeKey, route);\n    }\n\n    /**\n     * @param {string} path\n     * @param {string=} lang\n     * @return {Route}\n     */\n    find(path, lang = 'en') {\n        path = `/${path.trim().replace(regExpStartingSlash, '').replace(regExpEndingSlash, '')}`;\n        return this._findRoute(this._routes, path, path, lang);\n    }\n\n    /**\n     * @param {Array} routes\n     * @param {string} completePath\n     * @param {string} path\n     * @param {string} lang\n     * @param {Map} namedParams\n     * @return {RouterRoute} route the route or undefined if none found\n     */\n    _findRoute(routes, completePath, path, lang, namedParams) {\n        let result;\n        routes.some((route, index) => {\n            /* RouterRouteLang */\n            let routeLang = route.get(lang);\n            if (!routeLang) {\n                throw new Error(`Cannot find routeLang for lang ${lang} and route ${index}`);\n            }\n\n            if (this.logger) {\n                this.logger.info(`[springbokjs-router] trying ${routeLang.regExp}`);\n            }\n\n            const match = routeLang.match(path);\n            if (!match) {\n                return false;\n            }\n            // console.log(match);\n\n            match.shift(); // remove m[0];\n            let groupCount = match.length;\n\n            if (route instanceof RouterRouteSegment) {\n                const restOfThePath = match[--groupCount];\n\n                // Copy/paste... argh I hate that !\n                if (route.getNamedParamsCount() !== 0) {\n                    // set params\n                    if (!namedParams) {\n                        namedParams = new Map();\n                    }\n\n                    let group = 0;\n                    route.namedParams.forEach((paramName) => {\n                        const value = match[group++];\n                        if (value) {\n                            namedParams.set(paramName, value);\n                        }\n                    });\n                }\n\n                /* if (route.defaultRoute) {\n                    if (restOfThePath.length !== 0) {\n                        result = this._findRoute(route.subRoutes, completePath, restOfThePath, lang, namedParams);\n                    }\n                    if (!result) {\n                        result = this._createRoute(completePath, lang, route.defaultRoute, undefined, 0, namedParams);\n                    }\n                } else {*/\n                result = this._findRoute(route.subRoutes, completePath, restOfThePath, lang, namedParams);\n                // }\n            } else {\n                result = this._createRoute(completePath, lang, route, match, groupCount, namedParams);\n            }\n\n            return true;\n        });\n        return result;\n    }\n\n    /**\n     * Creates a new Route result\n     *\n     * @param {string} completePath\n     * @param {string} lang\n     * @param {RouterRoute} route\n     * @param {Array} match\n     * @param {int} groupCount\n     * @param {Map} namedParams\n     * @return {Route} route\n     */\n    _createRoute(completePath, lang, route, match, groupCount, namedParams) {\n        let group = 0;\n        let extension = groupCount === 0 || !route.extension ? undefined : match[--groupCount];\n\n        let controller = route.controller;\n        let action = route.action;\n\n        let otherParams;\n\n        if (route.getNamedParamsCount() !== 0) {\n            // set params\n            if (!namedParams) {\n                namedParams = new Map();\n            }\n\n            route.namedParams.forEach((paramName) => {\n                const value = match[group++];\n                if (value) {\n                    namedParams.set(paramName, value);\n                }\n            });\n\n            if (!namedParams.size) {\n                namedParams = undefined;\n            }\n        }\n\n        if (namedParams) {\n            // Replace controller and action if needed\n            if (namedParams.has('controller')) {\n                controller = this._routesTranslations.untranslate(namedParams.get('controller'), lang);\n                // Should we remove it ?\n                namedParams.delete('controller');\n            }\n\n            if (namedParams.has('action')) {\n                action = this._routesTranslations.untranslate(namedParams.get('action'), lang);\n                // Should we remove it ?\n                namedParams.delete('action');\n            }\n\n            if (!namedParams.size) {\n                namedParams = undefined;\n            }\n        }\n\n        // The only not-named param can be /*\n        if (group + 1 === groupCount && match[group]) {\n            otherParams = match[group].split('/');\n        }\n\n        return new Route(completePath, controller, action, namedParams, otherParams, extension);\n    }\n\n    /**\n     * Create a link\n     *\n     * @param {string} lang\n     * @param {string} routeKey\n     * @param {string} [params.extension]\n     * @param {string} [params.queryString]\n     * @param {string} [params.hash]\n     * @return {string}\n     */\n    urlGenerator(lang, routeKey, params) {\n        const route = this._routesMap.get(routeKey);\n        try {\n            return route.routes.get(lang).url(params);\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n}\n"]}