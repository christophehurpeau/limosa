{"version":3,"sources":["../src/Router.js"],"names":[],"mappings":"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","file":"Router.js","sourcesContent":["import RouterRoute from './RouterRoute/Route';\nimport RouterRouteSegment from './RouterRoute/Segment';\nimport Route from './Route';\nimport RouterRouteCommon from './RouterRoute/Common';\n\nconst regExpStartingSlash = /^\\/+/;\nconst regExpEndingSlash = /\\/+$/;\n\nexport default class Router {\n    /**\n     * @param {RoutesTranslations} routesTranslations\n     */\n    constructor(routesTranslations) {\n        this._routesMap = new Map();\n        this._routes = [];\n        this._routesTranslations = routesTranslations;\n    }\n\n    /**\n     * Get a Route by its key\n     *\n     * @param {string} key\n     * @return {Route}\n     */\n    get(key: string): ?Route {\n        return this._routesMap.get(key);\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {RouterRouteCommon} route\n     */\n    addRoute(routeKey: string, route: RouterRouteCommon) {\n        if (route instanceof RouterRoute) {\n            this._addInternalRoute(routeKey, route);\n        }\n\n        this._routes.push(route);\n    }\n\n    /**\n     * @param {string} routeKey\n     * @param {RouterRoute} route\n     */\n    _addInternalRoute(routeKey: string, route: RouterRoute) {\n        if (this._routesMap.has(routeKey)) {\n            throw new Error(`duplicate routeKey: \"${routeKey}\"`);\n        }\n        this._routesMap.set(routeKey, route);\n    }\n\n    /**\n     * @param {string} path\n     * @param {string=} lang\n     * @return {Route}\n     */\n    find(path: string, lang: string = 'en'): Route {\n        path = `/${path.trim().replace(regExpStartingSlash, '').replace(regExpEndingSlash, '')}`;\n        return this._findRoute(this._routes, path, path, lang);\n    }\n\n    /**\n     * @param {Array} routes\n     * @param {string} completePath\n     * @param {string} path\n     * @param {string} lang\n     * @param {Map} namedParams\n     * @return {RouterRoute} route the route or undefined if none found\n     */\n    _findRoute(routes, completePath, path, lang, namedParams) {\n        let result;\n        routes.some((route, index) => {\n            /* RouterRouteLang */\n            let routeLang = route.get(lang);\n            if (!routeLang) {\n                throw new Error(`Cannot find routeLang for lang ${lang} and route ${index}`);\n            }\n\n            // console.log(`[springbokjs-router] trying ${routeLang.regExp}`);\n            if (this.logger) {\n                this.logger.info(`[springbokjs-router] trying ${routeLang.regExp}`);\n            }\n\n            const match = routeLang.match(path);\n            if (!match) {\n                return false;\n            }\n            // console.log(match);\n\n            match.shift(); // remove m[0];\n            let groupCount = match.length;\n\n            if (route instanceof RouterRouteSegment) {\n                const restOfThePath = match[--groupCount];\n\n                // Copy/paste... argh I hate that !\n                if (route.getNamedParamsCount() !== 0) {\n                    // set params\n                    if (!namedParams) {\n                        namedParams = new Map();\n                    }\n\n                    let group = 0;\n                    route.namedParams.forEach((paramName) => {\n                        const value = match[group++];\n                        if (value) {\n                            namedParams.set(paramName, value);\n                        }\n                    });\n                }\n\n                /* if (route.defaultRoute) {\n                    if (restOfThePath.length !== 0) {\n                        result = this._findRoute(route.subRoutes, completePath, restOfThePath, lang, namedParams);\n                    }\n                    if (!result) {\n                        result = this._createRoute(completePath, lang, route.defaultRoute, undefined, 0, namedParams);\n                    }\n                } else {*/\n                result = this._findRoute(route.subRoutes, completePath, restOfThePath, lang, namedParams);\n                // }\n            } else {\n                result = this._createRoute(completePath, lang, route, match, groupCount, namedParams);\n            }\n\n            return true;\n        });\n        return result;\n    }\n\n    /**\n     * Creates a new Route result\n     *\n     * @param {string} completePath\n     * @param {string} lang\n     * @param {RouterRoute} route\n     * @param {Array} match\n     * @param {int} groupCount\n     * @param {Map} namedParams\n     * @return {Route} route\n     */\n    _createRoute(completePath, lang, route, match, groupCount, namedParams) {\n        let group = 0;\n        let extension = groupCount === 0 || !route.extension ? undefined : match[--groupCount];\n\n        let controller = route.controller;\n        let action = route.action;\n\n        let otherParams;\n\n        if (route.getNamedParamsCount() !== 0) {\n            // set params\n            if (!namedParams) {\n                namedParams = new Map();\n            }\n\n            route.namedParams.forEach((paramName) => {\n                const value = match[group++];\n                if (value) {\n                    namedParams.set(paramName, value);\n                }\n            });\n\n            if (!namedParams.size) {\n                namedParams = undefined;\n            }\n        }\n\n        if (namedParams) {\n            // Replace controller and action if needed\n            if (namedParams.has('controller')) {\n                controller = this._routesTranslations.untranslate(namedParams.get('controller'), lang);\n                // Should we remove it ?\n                namedParams.delete('controller');\n            }\n\n            if (namedParams.has('action')) {\n                action = this._routesTranslations.untranslate(namedParams.get('action'), lang);\n                // Should we remove it ?\n                namedParams.delete('action');\n            }\n\n            if (!namedParams.size) {\n                namedParams = undefined;\n            }\n        }\n\n        // The only not-named param can be /*\n        if (group + 1 === groupCount && match[group]) {\n            otherParams = match[group].split('/');\n        }\n\n        return new Route(\n            route.key,\n            completePath,\n            controller,\n            action,\n            namedParams,\n            otherParams,\n            extension\n        );\n    }\n\n    /**\n     * Create a link\n     *\n     * @param {string} lang\n     * @param {string} routeKey\n     * @param {string} [params.extension]\n     * @param {string} [params.queryString]\n     * @param {string} [params.hash]\n     * @return {string}\n     */\n    urlGenerator(lang, routeKey, params) {\n        const route = this._routesMap.get(routeKey);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!route) throw new Error(`Invalid routeKey: \"${routeKey}\"`);\n        }\n        try {\n            return route.routes.get(lang).url(params);\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    }\n}\n"]}