{"version":3,"sources":["../src/RoutesTranslations.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAGqB,kB,GAAN,MAAM,kBAAN,CAAyB;;;;AAIpC,gBAAY,YAAZ,EAA0B;AACtB,aAAK,UAAL,GAAkB,IAAI,GAAJ,EAAlB;;AAEA,YAAI,CAAC,YAAL,EAAmB;AACf;AACH;;AAED,yBAAmC,YAAnC,EAAiD;AAAA;;AAAA,gBAAvC,GAAuC;AAAA,gBAAlC,eAAkC;;AAC7C,8BAAgC,eAAhC,EAAiD;AAAA;;AAAA,oBAAvC,IAAuC;AAAA,oBAAjC,WAAiC;;AAC7C,oBAAI,CAAC,KAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,CAAL,EAAgC;AAC5B,yBAAK,UAAL,CAAgB,GAAhB,CACI,IADJ,EAEI;AACI,mCAAW,IAAI,GAAJ,EADf;AAEI,qCAAa,IAAI,GAAJ;AAFjB,qBAFJ;AAOH;;AAED,sBAAM,WAAW,KAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,CAAjB;;AAEA,yBAAS,SAAT,CAAmB,GAAnB,CAAuB,IAAI,WAAJ,EAAvB,EAA0C,WAA1C;AACA,yBAAS,WAAT,CAAqB,GAArB,CAAyB,YAAY,WAAZ,EAAzB,EAAoD,GAApD;AACH;AACJ;AACJ;;;;;;;AAOD,cAAU,MAAV,EAAkB,IAAlB,EAAwB;AACpB,iBAAS,OAAO,WAAP,EAAT;AACA,cAAM,kBAAkB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,EAA0B,SAAlD;;AAEA,YAAI,CAAC,gBAAgB,GAAhB,CAAoB,MAApB,CAAL,EAAkC;AAC9B,kBAAM,IAAI,KAAJ,CAAU,CAAC,oBAAD,GAAuB,MAAvB,EAA8B,UAA9B,GAA0C,IAA1C,EAA+C,AAA/C,CAAV,CAAN;AACH;;AAED,eAAO,gBAAgB,GAAhB,CAAoB,MAApB,CAAP;AACH;;;;;;;AAOD,gBAAY,MAAZ,EAAoB,IAApB,EAA0B;AACtB,iBAAS,OAAO,WAAP,EAAT;AACA,cAAM,kBAAkB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,EAA0B,WAAlD;;AAEA,YAAI,CAAC,gBAAgB,GAAhB,CAAoB,MAApB,CAAL,EAAkC;AAC9B,kBAAM,IAAI,KAAJ,CAAU,CAAC,sBAAD,GAAyB,MAAzB,EAAgC,UAAhC,GAA4C,IAA5C,EAAiD,AAAjD,CAAV,CAAN;AACH;;AAED,eAAO,gBAAgB,GAAhB,CAAoB,MAApB,CAAP;AACH;AA7DmC,C;kBAAnB,kB","file":"RoutesTranslations.js","sourcesContent":["/**\n * Convert a simple conf file key=>value into a two-way translation map\n */\nexport default class RoutesTranslations {\n    /**\n     * @param {Map} translations\n     */\n    constructor(translations) {\n        this._languages = new Map();\n\n        if (!translations) {\n            return;\n        }\n\n        for (let [key, translationsMap] of translations) {\n            for (let [lang, translation] of translationsMap) {\n                if (!this._languages.has(lang)) {\n                    this._languages.set(\n                        lang,\n                        {\n                            translate: new Map(),\n                            untranslate: new Map(),\n                        }\n                    );\n                }\n\n                const language = this._languages.get(lang);\n\n                language.translate.set(key.toLowerCase(), translation);\n                language.untranslate.set(translation.toLowerCase(), key);\n            }\n        }\n    }\n\n    /**\n     * @param {string} string\n     * @param {string} lang\n     * @return {string}\n     */\n    translate(string, lang) {\n        string = string.toLowerCase();\n        const translationsMap = this._languages.get(lang).translate;\n\n        if (!translationsMap.has(string)) {\n            throw new Error(`Missing translation ${string} for lang ${lang}`);\n        }\n\n        return translationsMap.get(string);\n    }\n\n    /**\n     * @param {string} string\n     * @param {string} lang\n     * @return {string}\n     */\n    untranslate(string, lang) {\n        string = string.toLowerCase();\n        const translationsMap = this._languages.get(lang).untranslate;\n\n        if (!translationsMap.has(string)) {\n            throw new Error(`Missing untranslation ${string} for lang ${lang}`);\n        }\n\n        return translationsMap.get(string);\n    }\n}\n"]}